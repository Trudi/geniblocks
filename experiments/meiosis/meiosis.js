"use strict";

var mother = new BioLogica.Organism(BioLogica.Species.Drake, "a:m,b:M,a:h,b:h,a:C,b:C,a:a,b:a,a:B,b:B,a:D,b:D,a:w,b:W,a:Fl,b:Fl,a:Hl,b:hl,a:T,b:t,a:rh,b:rh,a:Bog,b:Bog", 1),
    father = new BioLogica.Organism(BioLogica.Species.Drake, "a:M,a:h,b:h,a:C,b:C,a:a,b:a,a:B,a:D,a:W,a:fl,b:fl,a:Hl,a:t,b:T,a:rh,a:Bog,b:Bog", 0),
    hiddenAlleles = ['h', 'c', 'a', 'b', 'd', 'bog', 'rh'],
    motherDisabledAlleles = [],
    fatherDisabledAlleles = [],
    showFilters = false,
    gameteCount = 72,
    animStiffness = 100,
    gametePoolWidth = 300,
    gametePoolHeight = 350,
    filteredGameteCount = 35,
    filteredGametePoolHeight = 200,
    motherGametes,
    fatherGametes,
    prevSelectedMotherGameteId,
    selectedMotherGameteId,
    selectedMotherGamete,
    selectedMotherGameteSrcRect,
    prevSelectedFatherGameteId,
    selectedFatherGameteId,
    selectedFatherGamete,
    selectedFatherGameteSrcRect,
    fertilizationState = 'none',
    // 'none' -> 'fertilizing' -> 'fertilized' -> 'complete' -> 'none'
offspring;

function parseQueryString(queryString) {
  var params = {},
      queries,
      temp,
      i,
      l;

  // Split into key/value pairs
  queries = queryString.split('&');

  // Convert the array of strings into an object
  for (i = 0, l = queries.length; i < l; i++) {
    temp = queries[i].split('=');
    params[temp[0]] = temp[1];
  }

  return params;
}

var urlParams = parseQueryString(window.location.search.substring(1));
if (urlParams.filter && (urlParams.filter.toLowerCase() === "true" || Boolean(Number(urlParams.filter)))) {
  showFilters = true;
  gametePoolHeight = filteredGametePoolHeight;
  gameteCount = filteredGameteCount;
}
if (urlParams.count > 0) gameteCount = Number(urlParams.count);
if (urlParams.speed > 0) animStiffness = Number(urlParams.speed);

motherGametes = mother.createGametes(gameteCount);
fatherGametes = father.createGametes(gameteCount);

function isGameteDisabled(gamete, disabledAlleles) {
  for (var ch in gamete) {
    var chromosome = gamete[ch];
    for (var i = 0; i < chromosome.alleles.length; ++i) {
      var allele = chromosome.alleles[i];
      // if any allele is disabled, the gamete is disabled
      if (disabledAlleles.indexOf(allele) >= 0) return true;
    }
  }
  // if no alleles are disabled, the gamete is enabled
  return false;
}

function isMotherGameteDisabled(gamete) {
  return isGameteDisabled(gamete, motherDisabledAlleles);
}

function isFatherGameteDisabled(gamete) {
  return isGameteDisabled(gamete, fatherDisabledAlleles);
}

function render() {
  // Mother org
  ReactDOM.render(React.createElement(GeniBlocks.OrganismView, { org: mother }), document.getElementById('mother'));
  // Father org
  ReactDOM.render(React.createElement(GeniBlocks.OrganismView, { org: father }), document.getElementById('father'));

  // Mother gamete filters
  if (showFilters) {
    ReactDOM.render(React.createElement(GeniBlocks.AlleleFiltersView, {
      species: mother.species,
      hiddenAlleles: hiddenAlleles,
      disabledAlleles: motherDisabledAlleles,
      onFilterChange: function onFilterChange(evt, allele, isChecked) {
        evt;
        var alleleIndex = motherDisabledAlleles.indexOf(allele),
            wasChecked = alleleIndex < 0;
        if (isChecked !== wasChecked) {
          if (isChecked) motherDisabledAlleles.splice(alleleIndex, 1);else {
            motherDisabledAlleles.push(allele);
            if (selectedMotherGamete && isMotherGameteDisabled(selectedMotherGamete)) {
              selectedMotherGameteId = null;
              selectedMotherGamete = null;
            }
          }
        }
        render();
      }
    }), document.getElementById('mother-allele-filters'));
  } else {
    ReactDOM.unmountComponentAtNode(document.getElementById('mother-allele-filters'));
    document.getElementById('mother-allele-filters').style.display = 'none';
  }

  // Father gamete filters
  if (showFilters) {
    ReactDOM.render(React.createElement(GeniBlocks.AlleleFiltersView, {
      species: father.species,
      hiddenAlleles: hiddenAlleles,
      disabledAlleles: fatherDisabledAlleles,
      onFilterChange: function onFilterChange(evt, allele, isChecked) {
        evt;
        var alleleIndex = fatherDisabledAlleles.indexOf(allele),
            wasChecked = alleleIndex < 0;
        if (isChecked !== wasChecked) {
          if (isChecked) fatherDisabledAlleles.splice(alleleIndex, 1);else {
            fatherDisabledAlleles.push(allele);
            if (selectedFatherGamete && isFatherGameteDisabled(selectedFatherGamete)) {
              selectedFatherGameteId = null;
              selectedFatherGamete = null;
            }
          }
        }
        render();
      }
    }), document.getElementById('father-allele-filters'));
  } else {
    ReactDOM.unmountComponentAtNode(document.getElementById('father-allele-filters'));
    document.getElementById('father-allele-filters').style.display = 'none';
  }

  // Mother gametes
  ReactDOM.render(React.createElement(GeniBlocks.GametePoolView, {
    gametes: motherGametes,
    hiddenAlleles: hiddenAlleles,
    width: gametePoolWidth,
    height: gametePoolHeight,
    animStiffness: animStiffness,
    selectedId: selectedMotherGameteId,
    isGameteDisabled: isMotherGameteDisabled,
    onGameteSelected: function onGameteSelected(evt, id, gameteViewportRect) {
      if (selectedMotherGameteId !== id) {
        prevSelectedMotherGameteId = selectedMotherGameteId;
        selectedMotherGameteId = id;
        selectedMotherGamete = motherGametes[selectedMotherGameteId - 1];
        selectedMotherGameteSrcRect = gameteViewportRect;
        offspring = null;
        render();
      }
    }
  }), document.getElementById('mother-gametes'));

  // Father gametes
  ReactDOM.render(React.createElement(GeniBlocks.GametePoolView, {
    gametes: fatherGametes,
    hiddenAlleles: hiddenAlleles,
    width: gametePoolWidth,
    height: gametePoolHeight,
    animStiffness: animStiffness,
    selectedId: selectedFatherGameteId,
    isGameteDisabled: isFatherGameteDisabled,
    onGameteSelected: function onGameteSelected(evt, id, gameteViewportRect) {
      if (selectedFatherGameteId !== id) {
        prevSelectedFatherGameteId = selectedFatherGameteId;
        selectedFatherGameteId = id;
        selectedFatherGamete = fatherGametes[selectedFatherGameteId - 1];
        selectedFatherGameteSrcRect = gameteViewportRect;
        offspring = null;
        render();
      }
    }
  }), document.getElementById('father-gametes'));

  // Offspring org
  function renderOffspring() {
    var offspringOpacity = fertilizationState === 'fertilized' ? 1.0 : 0.0;
    if (offspring) {
      ReactDOM.render(React.createElement(GeniBlocks.AnimatedOrganismView, {
        org: offspring,
        initialOpacity: 0.0,
        opacity: offspringOpacity,
        onRest: function onRest() {
          selectedMotherGamete = selectedMotherGameteId = null;
          selectedFatherGamete = selectedFatherGameteId = null;
          fertilizationState = 'none';
          render();
        }
      }), document.getElementById('offspring'));
    } else {
      ReactDOM.unmountComponentAtNode(document.getElementById('offspring'));
    }
  }
  renderOffspring();

  // Mother selected gamete
  function renderSelectedMotherGamete() {
    if (!selectedMotherGameteId || selectedMotherGameteId !== prevSelectedMotherGameteId) {
      ReactDOM.unmountComponentAtNode(document.getElementById('mother-selected-gamete'));
    }
    if (selectedMotherGameteId) {
      var motherSelectedGameteViewportRect = document.getElementById('mother-selected-gamete').getBoundingClientRect();
      ReactDOM.render(React.createElement(GeniBlocks.FertilizingGameteView, {
        type: 'mother',
        gamete: selectedMotherGamete, id: selectedMotherGameteId,
        fertilizationState: fertilizationState,
        hiddenAlleles: hiddenAlleles,
        srcRect: selectedMotherGameteSrcRect,
        dstRect: motherSelectedGameteViewportRect,
        animStiffness: animStiffness,
        onRest: function onRest() {
          if (fertilizationState === 'fertilizing') {
            fertilizationState = 'fertilized';
            // currently we must unmount to trigger the next animation stage
            ReactDOM.unmountComponentAtNode(document.getElementById('mother-selected-gamete'));
            ReactDOM.unmountComponentAtNode(document.getElementById('father-selected-gamete'));
            renderSelectedMotherGamete();
            renderSelectedFatherGamete();
            renderOffspring();
          }
        }
      }), document.getElementById('mother-selected-gamete'));
      prevSelectedMotherGameteId = selectedMotherGameteId;
    }
  }
  renderSelectedMotherGamete();

  // Father selected gamete
  function renderSelectedFatherGamete() {
    if (!selectedFatherGameteId || selectedFatherGameteId !== prevSelectedFatherGameteId) {
      ReactDOM.unmountComponentAtNode(document.getElementById('father-selected-gamete'));
    }
    if (selectedFatherGameteId) {
      var fatherSelectedGameteViewportRect = document.getElementById('father-selected-gamete').getBoundingClientRect();
      ReactDOM.render(React.createElement(GeniBlocks.FertilizingGameteView, {
        type: 'father',
        gamete: selectedFatherGamete, id: selectedFatherGameteId,
        fertilizationState: fertilizationState,
        hiddenAlleles: hiddenAlleles,
        srcRect: selectedFatherGameteSrcRect,
        dstRect: fatherSelectedGameteViewportRect,
        animStiffness: animStiffness
      }), document.getElementById('father-selected-gamete'));
      prevSelectedFatherGameteId = selectedFatherGameteId;
    }
  }
  renderSelectedFatherGamete();
} // render()

function breed() {
  if (selectedMotherGamete && selectedFatherGamete) {
    fertilizationState = 'fertilizing';
    offspring = BioLogica.Organism.createFromGametes(mother.species, selectedMotherGamete, selectedFatherGamete);
    render();
  }
}

document.getElementById("breed-button").onclick = breed;

render();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4cGVyaW1lbnRzL21laW9zaXMvbWVpb3Npcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUksU0FBUyxJQUFJLFVBQVUsUUFBVixDQUFtQixVQUFVLE9BQVYsQ0FBa0IsS0FBbEIsRUFBeUIsMkdBQWhELEVBQTZKLENBQTdKLENBQVQ7SUFDQSxTQUFTLElBQUksVUFBVSxRQUFWLENBQW1CLFVBQVUsT0FBVixDQUFrQixLQUFsQixFQUF5QixpRkFBaEQsRUFBbUksQ0FBbkksQ0FBVDtJQUNBLGdCQUFnQixDQUFDLEdBQUQsRUFBSyxHQUFMLEVBQVMsR0FBVCxFQUFhLEdBQWIsRUFBaUIsR0FBakIsRUFBcUIsS0FBckIsRUFBMkIsSUFBM0IsQ0FBaEI7SUFDQSx3QkFBd0IsRUFBeEI7SUFDQSx3QkFBd0IsRUFBeEI7SUFDQSxjQUFjLEtBQWQ7SUFDQSxjQUFjLEVBQWQ7SUFDQSxnQkFBZ0IsR0FBaEI7SUFDQSxrQkFBa0IsR0FBbEI7SUFDQSxtQkFBbUIsR0FBbkI7SUFDQSxzQkFBc0IsRUFBdEI7SUFDQSwyQkFBMkIsR0FBM0I7SUFDQSxhQVpKO0lBYUksYUFiSjtJQWNJLDBCQWRKO0lBZUksc0JBZko7SUFnQkksb0JBaEJKO0lBaUJJLDJCQWpCSjtJQWtCSSwwQkFsQko7SUFtQkksc0JBbkJKO0lBb0JJLG9CQXBCSjtJQXFCSSwyQkFyQko7SUFzQkkscUJBQXFCLE1BQXJCOztBQUNBLFNBdkJKOztBQXlCQSxTQUFTLGdCQUFULENBQTBCLFdBQTFCLEVBQXVDO0FBQ25DLE1BQUksU0FBUyxFQUFUO01BQWEsT0FBakI7TUFBMEIsSUFBMUI7TUFBZ0MsQ0FBaEM7TUFBbUMsQ0FBbkM7OztBQURtQyxTQUluQyxHQUFVLFlBQVksS0FBWixDQUFrQixHQUFsQixDQUFWOzs7QUFKbUMsT0FPN0IsSUFBSSxDQUFKLEVBQU8sSUFBSSxRQUFRLE1BQVIsRUFBZ0IsSUFBSSxDQUFKLEVBQU8sR0FBeEMsRUFBOEM7QUFDMUMsV0FBTyxRQUFRLENB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Q0FBVDtBQUNBLHVCQUFlLGFBQWY7T0FQRixDQURGLEVBVUUsU0FBUyxjQUFULENBQXdCLHdCQUF4QixDQVZGLEVBSDBCO0FBZTFCLG1DQUE2QixzQkFBN0IsQ0FmMEI7S0FBNUI7R0FKRjtBQXNCQSwrQkFsTmdCO0NBQWxCOztBQXFOQSxTQUFTLEtBQVQsR0FBaUI7QUFDZixNQUFJLHdCQUF3QixvQkFBeEIsRUFBOEM7QUFDaEQseUJBQXFCLGFBQXJCLENBRGdEO0FBRWhELGdCQUFZLFVBQVUsUUFBVixDQUFtQixpQkFBbkIsQ0FBcUMsT0FBTyxPQUFQLEVBQWdCLG9CQUFyRCxFQUEyRSxvQkFBM0UsQ0FBWixDQUZnRDtBQUdoRCxhQUhnRDtHQUFsRDtDQURGOztBQVFBLFNBQVMsY0FBVCxDQUF3QixjQUF4QixFQUF3QyxPQUF4QyxHQUFrRCxLQUFsRDs7QUFFQSIsImZpbGUiOiJleHBlcmltZW50cy9tZWlvc2lzL21laW9zaXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbW90aGVyID0gbmV3IEJpb0xvZ2ljYS5PcmdhbmlzbShCaW9Mb2dpY2EuU3BlY2llcy5EcmFrZSwgXCJhOm0sYjpNLGE6aCxiOmgsYTpDLGI6QyxhOmEsYjphLGE6QixiOkIsYTpELGI6RCxhOncsYjpXLGE6RmwsYjpGbCxhOkhsLGI6aGwsYTpULGI6dCxhOnJoLGI6cmgsYTpCb2csYjpCb2dcIiwgMSksXG4gICAgZmF0aGVyID0gbmV3IEJpb0xvZ2ljYS5PcmdhbmlzbShCaW9Mb2dpY2EuU3BlY2llcy5EcmFrZSwgXCJhOk0sYTpoLGI6aCxhOkMsYjpDLGE6YSxiOmEsYTpCLGE6RCxhOlcsYTpmbCxiOmZsLGE6SGwsYTp0LGI6VCxhOnJoLGE6Qm9nLGI6Qm9nXCIsIDApLFxuICAgIGhpZGRlbkFsbGVsZXMgPSBbJ2gnLCdjJywnYScsJ2InLCdkJywnYm9nJywncmgnXSxcbiAgICBtb3RoZXJEaXNhYmxlZEFsbGVsZXMgPSBbXSxcbiAgICBmYXRoZXJEaXNhYmxlZEFsbGVsZXMgPSBbXSxcbiAgICBzaG93RmlsdGVycyA9IGZhbHNlLFxuICAgIGdhbWV0ZUNvdW50ID0gNzIsXG4gICAgYW5pbVN0aWZmbmVzcyA9IDEwMCxcbiAgICBnYW1ldGVQb29sV2lkdGggPSAzMDAsXG4gICAgZ2FtZXRlUG9vbEhlaWdodCA9IDM1MCxcbiAgICBmaWx0ZXJlZEdhbWV0ZUNvdW50ID0gMzUsXG4gICAgZmlsdGVyZWRHYW1ldGVQb29sSGVpZ2h0ID0gMjAwLFxuICAgIG1vdGhlckdhbWV0ZXMsXG4gICAgZmF0aGVyR2FtZXRlcyxcbiAgICBwcmV2U2VsZWN0ZWRNb3RoZXJHYW1ldGVJZCxcbiAgICBzZWxlY3RlZE1vdGhlckdhbWV0ZUlkLFxuICAgIHNlbGVjdGVkTW90aGVyR2FtZXRlLFxuICAgIHNlbGVjdGVkTW90aGVyR2FtZXRlU3JjUmVjdCxcbiAgICBwcmV2U2VsZWN0ZWRGYXRoZXJHYW1ldGVJZCxcbiAgICBzZWxlY3RlZEZhdGhlckdhbWV0ZUlkLFxuICAgIHNlbGVjdGVkRmF0aGVyR2FtZXRlLFxuICAgIHNlbGVjdGVkRmF0aGVyR2FtZXRlU3JjUmVjdCxcbiAgICBmZXJ0aWxpemF0aW9uU3RhdGUgPSAnbm9uZScsICAvLyAnbm9uZScgLT4gJ2ZlcnRpbGl6aW5nJyAtPiAnZmVydGlsaXplZCcgLT4gJ2NvbXBsZXRlJyAtPiAnbm9uZSdcbiAgICBvZmZzcHJpbmc7XG5cbmZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmcocXVlcnlTdHJpbmcpIHtcbiAgICB2YXIgcGFyYW1zID0ge30sIHF1ZXJpZXMsIHRlbXAsIGksIGw7XG5cbiAgICAvLyBTcGxpdCBpbnRvIGtleS92YWx1ZSBwYWlyc1xuICAgIHF1ZXJpZXMgPSBxdWVyeVN0cmluZy5zcGxpdCgnJicpO1xuXG4gICAgLy8gQ29udmVydCB0aGUgYXJyYXkgb2Ygc3RyaW5ncyBpbnRvIGFuIG9iamVjdFxuICAgIGZvciAoIGkgPSAwLCBsID0gcXVlcmllcy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG4gICAgICAgIHRlbXAgPSBxdWVyaWVzW2ldLnNwbGl0KCc9Jyk7XG4gICAgICAgIHBhcmFtc1t0ZW1wWzBdXSA9IHRlbXBbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtcztcbn1cblxudmFyIHVybFBhcmFtcyA9IHBhcnNlUXVlcnlTdHJpbmcoKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpLnN1YnN0cmluZygxKSk7XG5pZiAodXJsUGFyYW1zLmZpbHRlciAmJiAoKHVybFBhcmFtcy5maWx0ZXIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0cnVlXCIpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBCb29sZWFuKE51bWJlcih1cmxQYXJhbXMuZmlsdGVyKSkpKSB7XG4gIHNob3dGaWx0ZXJzID0gdHJ1ZTtcbiAgZ2FtZXRlUG9vbEhlaWdodCA9IGZpbHRlcmVkR2FtZXRlUG9vbEhlaWdodDtcbiAgZ2FtZXRlQ291bnQgPSBmaWx0ZXJlZEdhbWV0ZUNvdW50O1xufVxuaWYgKHVybFBhcmFtcy5jb3VudCA+IDApXG4gIGdhbWV0ZUNvdW50ID0gTnVtYmVyKHVybFBhcmFtcy5jb3VudCk7XG5pZiAodXJsUGFyYW1zLnNwZWVkID4gMClcbiAgYW5pbVN0aWZmbmVzcyA9IE51bWJlcih1cmxQYXJhbXMuc3BlZWQpO1xuXG5tb3RoZXJHYW1ldGVzID0gbW90aGVyLmNyZWF0ZUdhbWV0ZXMoZ2FtZXRlQ291bnQpO1xuZmF0aGVyR2FtZXRlcyA9IGZhdGhlci5jcmVhdGVHYW1ldGVzKGdhbWV0ZUNvdW50KTtcblxuZnVuY3Rpb24gaXNHYW1ldGVEaXNhYmxlZChnYW1ldGUsIGRpc2FibGVkQWxsZWxlcykge1xuICBmb3IgKHZhciBjaCBpbiBnYW1ldGUpIHtcbiAgICB2YXIgY2hyb21vc29tZSA9IGdhbWV0ZVtjaF07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaHJvbW9zb21lLmFsbGVsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBhbGxlbGUgPSBjaHJvbW9zb21lLmFsbGVsZXNbaV07XG4gICAgICAvLyBpZiBhbnkgYWxsZWxlIGlzIGRpc2FibGVkLCB0aGUgZ2FtZXRlIGlzIGRpc2FibGVkXG4gICAgICBpZiAoZGlzYWJsZWRBbGxlbGVzLmluZGV4T2YoYWxsZWxlKSA+PSAwKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgLy8gaWYgbm8gYWxsZWxlcyBhcmUgZGlzYWJsZWQsIHRoZSBnYW1ldGUgaXMgZW5hYmxlZFxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzTW90aGVyR2FtZXRlRGlzYWJsZWQoZ2FtZXRlKSB7XG4gIHJldHVybiBpc0dhbWV0ZURpc2FibGVkKGdhbWV0ZSwgbW90aGVyRGlzYWJsZWRBbGxlbGVzKTtcbn1cblxuZnVuY3Rpb24gaXNGYXRoZXJHYW1ldGVEaXNhYmxlZChnYW1ldGUpIHtcbiAgcmV0dXJuIGlzR2FtZXRlRGlzYWJsZWQoZ2FtZXRlLCBmYXRoZXJEaXNhYmxlZEFsbGVsZXMpO1xufVxuXG5mdW5jdGlvbiByZW5kZXIoKSB7XG4gIC8vIE1vdGhlciBvcmdcbiAgUmVhY3RET00ucmVuZGVyKFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2VuaUJsb2Nrcy5PcmdhbmlzbVZpZXcsIHtvcmc6IG1vdGhlcn0pLFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RoZXInKVxuICApO1xuICAvLyBGYXRoZXIgb3JnXG4gIFJlYWN0RE9NLnJlbmRlcihcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdlbmlCbG9ja3MuT3JnYW5pc21WaWV3LCB7b3JnOiBmYXRoZXJ9KSxcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmF0aGVyJylcbiAgKTtcblxuICAvLyBNb3RoZXIgZ2FtZXRlIGZpbHRlcnNcbiAgaWYgKHNob3dGaWx0ZXJzKSB7XG4gICAgUmVhY3RET00ucmVuZGVyKFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChHZW5pQmxvY2tzLkFsbGVsZUZpbHRlcnNWaWV3LCB7XG4gICAgICAgIHNwZWNpZXM6IG1vdGhlci5zcGVjaWVzLFxuICAgICAgICBoaWRkZW5BbGxlbGVzOiBoaWRkZW5BbGxlbGVzLFxuICAgICAgICBkaXNhYmxlZEFsbGVsZXM6IG1vdGhlckRpc2FibGVkQWxsZWxlcyxcbiAgICAgICAgb25GaWx0ZXJDaGFuZ2U6IGZ1bmN0aW9uKGV2dCwgYWxsZWxlLCBpc0NoZWNrZWQpIHtcbiAgICAgICAgICBldnQ7XG4gICAgICAgICAgdmFyIGFsbGVsZUluZGV4ID0gbW90aGVyRGlzYWJsZWRBbGxlbGVzLmluZGV4T2YoYWxsZWxlKSxcbiAgICAgICAgICAgICAgd2FzQ2hlY2tlZCA9IGFsbGVsZUluZGV4IDwgMDtcbiAgICAgICAgICBpZiAoaXNDaGVja2VkICE9PSB3YXNDaGVja2VkKSB7XG4gICAgICAgICAgICBpZiAoaXNDaGVja2VkKVxuICAgICAgICAgICAgICBtb3RoZXJEaXNhYmxlZEFsbGVsZXMuc3BsaWNlKGFsbGVsZUluZGV4LCAxKTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBtb3RoZXJEaXNhYmxlZEFsbGVsZXMucHVzaChhbGxlbGUpO1xuICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRNb3RoZXJHYW1ldGUgJiYgaXNNb3RoZXJHYW1ldGVEaXNhYmxlZChzZWxlY3RlZE1vdGhlckdhbWV0ZSkpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZE1vdGhlckdhbWV0ZUlkID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZE1vdGhlckdhbWV0ZSA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGhlci1hbGxlbGUtZmlsdGVycycpXG4gICAgKTtcbiAgfVxuICBlbHNlIHtcbiAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RoZXItYWxsZWxlLWZpbHRlcnMnKSk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGhlci1hbGxlbGUtZmlsdGVycycpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cblxuICAvLyBGYXRoZXIgZ2FtZXRlIGZpbHRlcnNcbiAgaWYgKHNob3dGaWx0ZXJzKSB7XG4gICAgUmVhY3RET00ucmVuZGVyKFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChHZW5pQmxvY2tzLkFsbGVsZUZpbHRlcnNWaWV3LCB7XG4gICAgICAgIHNwZWNpZXM6IGZhdGhlci5zcGVjaWVzLFxuICAgICAgICBoaWRkZW5BbGxlbGVzOiBoaWRkZW5BbGxlbGVzLFxuICAgICAgICBkaXNhYmxlZEFsbGVsZXM6IGZhdGhlckRpc2FibGVkQWxsZWxlcyxcbiAgICAgICAgb25GaWx0ZXJDaGFuZ2U6IGZ1bmN0aW9uKGV2dCwgYWxsZWxlLCBpc0NoZWNrZWQpIHtcbiAgICAgICAgICBldnQ7XG4gICAgICAgICAgdmFyIGFsbGVsZUluZGV4ID0gZmF0aGVyRGlzYWJsZWRBbGxlbGVzLmluZGV4T2YoYWxsZWxlKSxcbiAgICAgICAgICAgICAgd2FzQ2hlY2tlZCA9IGFsbGVsZUluZGV4IDwgMDtcbiAgICAgICAgICBpZiAoaXNDaGVja2VkICE9PSB3YXNDaGVja2VkKSB7XG4gICAgICAgICAgICBpZiAoaXNDaGVja2VkKVxuICAgICAgICAgICAgICBmYXRoZXJEaXNhYmxlZEFsbGVsZXMuc3BsaWNlKGFsbGVsZUluZGV4LCAxKTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBmYXRoZXJEaXNhYmxlZEFsbGVsZXMucHVzaChhbGxlbGUpO1xuICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRGYXRoZXJHYW1ldGUgJiYgaXNGYXRoZXJHYW1ldGVEaXNhYmxlZChzZWxlY3RlZEZhdGhlckdhbWV0ZSkpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEZhdGhlckdhbWV0ZUlkID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZEZhdGhlckdhbWV0ZSA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhdGhlci1hbGxlbGUtZmlsdGVycycpXG4gICAgKTtcbiAgfVxuICBlbHNlIHtcbiAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYXRoZXItYWxsZWxlLWZpbHRlcnMnKSk7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhdGhlci1hbGxlbGUtZmlsdGVycycpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH1cblxuICAvLyBNb3RoZXIgZ2FtZXRlc1xuICBSZWFjdERPTS5yZW5kZXIoXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChHZW5pQmxvY2tzLkdhbWV0ZVBvb2xWaWV3LCB7XG4gICAgICBnYW1ldGVzOiBtb3RoZXJHYW1ldGVzLFxuICAgICAgaGlkZGVuQWxsZWxlczogaGlkZGVuQWxsZWxlcyxcbiAgICAgIHdpZHRoOiBnYW1ldGVQb29sV2lkdGgsXG4gICAgICBoZWlnaHQ6IGdhbWV0ZVBvb2xIZWlnaHQsXG4gICAgICBhbmltU3RpZmZuZXNzOiBhbmltU3RpZmZuZXNzLFxuICAgICAgc2VsZWN0ZWRJZDogc2VsZWN0ZWRNb3RoZXJHYW1ldGVJZCxcbiAgICAgIGlzR2FtZXRlRGlzYWJsZWQ6IGlzTW90aGVyR2FtZXRlRGlzYWJsZWQsXG4gICAgICBvbkdhbWV0ZVNlbGVjdGVkOiBmdW5jdGlvbihldnQsIGlkLCBnYW1ldGVWaWV3cG9ydFJlY3QpIHtcbiAgICAgICAgaWYgKHNlbGVjdGVkTW90aGVyR2FtZXRlSWQgIT09IGlkKSB7XG4gICAgICAgICAgcHJldlNlbGVjdGVkTW90aGVyR2FtZXRlSWQgPSBzZWxlY3RlZE1vdGhlckdhbWV0ZUlkO1xuICAgICAgICAgIHNlbGVjdGVkTW90aGVyR2FtZXRlSWQgPSBpZDtcbiAgICAgICAgICBzZWxlY3RlZE1vdGhlckdhbWV0ZSA9IG1vdGhlckdhbWV0ZXNbc2VsZWN0ZWRNb3RoZXJHYW1ldGVJZCAtIDFdO1xuICAgICAgICAgIHNlbGVjdGVkTW90aGVyR2FtZXRlU3JjUmVjdCA9IGdhbWV0ZVZpZXdwb3J0UmVjdDtcbiAgICAgICAgICBvZmZzcHJpbmcgPSBudWxsO1xuICAgICAgICAgIHJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSksXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdGhlci1nYW1ldGVzJylcbiAgKTtcblxuICAvLyBGYXRoZXIgZ2FtZXRlc1xuICBSZWFjdERPTS5yZW5kZXIoXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChHZW5pQmxvY2tzLkdhbWV0ZVBvb2xWaWV3LCB7XG4gICAgICBnYW1ldGVzOiBmYXRoZXJHYW1ldGVzLFxuICAgICAgaGlkZGVuQWxsZWxlczogaGlkZGVuQWxsZWxlcyxcbiAgICAgIHdpZHRoOiBnYW1ldGVQb29sV2lkdGgsXG4gICAgICBoZWlnaHQ6IGdhbWV0ZVBvb2xIZWlnaHQsXG4gICAgICBhbmltU3RpZmZuZXNzOiBhbmltU3RpZmZuZXNzLFxuICAgICAgc2VsZWN0ZWRJZDogc2VsZWN0ZWRGYXRoZXJHYW1ldGVJZCxcbiAgICAgIGlzR2FtZXRlRGlzYWJsZWQ6IGlzRmF0aGVyR2FtZXRlRGlzYWJsZWQsXG4gICAgICBvbkdhbWV0ZVNlbGVjdGVkOiBmdW5jdGlvbihldnQsIGlkLCBnYW1ldGVWaWV3cG9ydFJlY3QpIHtcbiAgICAgICAgaWYgKHNlbGVjdGVkRmF0aGVyR2FtZXRlSWQgIT09IGlkKSB7XG4gICAgICAgICAgcHJldlNlbGVjdGVkRmF0aGVyR2FtZXRlSWQgPSBzZWxlY3RlZEZhdGhlckdhbWV0ZUlkO1xuICAgICAgICAgIHNlbGVjdGVkRmF0aGVyR2FtZXRlSWQgPSBpZDtcbiAgICAgICAgICBzZWxlY3RlZEZhdGhlckdhbWV0ZSA9IGZhdGhlckdhbWV0ZXNbc2VsZWN0ZWRGYXRoZXJHYW1ldGVJZCAtIDFdO1xuICAgICAgICAgIHNlbGVjdGVkRmF0aGVyR2FtZXRlU3JjUmVjdCA9IGdhbWV0ZVZpZXdwb3J0UmVjdDtcbiAgICAgICAgICBvZmZzcHJpbmcgPSBudWxsO1xuICAgICAgICAgIHJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSksXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhdGhlci1nYW1ldGVzJylcbiAgKTtcblxuICAvLyBPZmZzcHJpbmcgb3JnXG4gIGZ1bmN0aW9uIHJlbmRlck9mZnNwcmluZygpIHtcbiAgICB2YXIgb2Zmc3ByaW5nT3BhY2l0eSA9IChmZXJ0aWxpemF0aW9uU3RhdGUgPT09ICdmZXJ0aWxpemVkJyA/IDEuMCA6IDAuMCk7XG4gICAgaWYgKG9mZnNwcmluZykge1xuICAgICAgUmVhY3RET00ucmVuZGVyKFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdlbmlCbG9ja3MuQW5pbWF0ZWRPcmdhbmlzbVZpZXcsIHtcbiAgICAgICAgICAgIG9yZzogb2Zmc3ByaW5nLCBcbiAgICAgICAgICAgIGluaXRpYWxPcGFjaXR5OiAwLjAsXG4gICAgICAgICAgICBvcGFjaXR5OiBvZmZzcHJpbmdPcGFjaXR5LFxuICAgICAgICAgICAgb25SZXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgc2VsZWN0ZWRNb3RoZXJHYW1ldGUgPSBzZWxlY3RlZE1vdGhlckdhbWV0ZUlkID0gbnVsbDtcbiAgICAgICAgICAgICAgc2VsZWN0ZWRGYXRoZXJHYW1ldGUgPSBzZWxlY3RlZEZhdGhlckdhbWV0ZUlkID0gbnVsbDtcbiAgICAgICAgICAgICAgZmVydGlsaXphdGlvblN0YXRlID0gJ25vbmUnO1xuICAgICAgICAgICAgICByZW5kZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29mZnNwcmluZycpXG4gICAgICApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29mZnNwcmluZycpKTtcbiAgICB9XG4gIH1cbiAgcmVuZGVyT2Zmc3ByaW5nKCk7XG5cbiAgLy8gTW90aGVyIHNlbGVjdGVkIGdhbWV0ZVxuICBmdW5jdGlvbiByZW5kZXJTZWxlY3RlZE1vdGhlckdhbWV0ZSgpIHtcbiAgICBpZiAoIXNlbGVjdGVkTW90aGVyR2FtZXRlSWQgfHwgKHNlbGVjdGVkTW90aGVyR2FtZXRlSWQgIT09IHByZXZTZWxlY3RlZE1vdGhlckdhbWV0ZUlkKSkge1xuICAgICAgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90aGVyLXNlbGVjdGVkLWdhbWV0ZScpKTtcbiAgICB9XG4gICAgaWYgKHNlbGVjdGVkTW90aGVyR2FtZXRlSWQpIHtcbiAgICAgIHZhciBtb3RoZXJTZWxlY3RlZEdhbWV0ZVZpZXdwb3J0UmVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RoZXItc2VsZWN0ZWQtZ2FtZXRlJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIFJlYWN0RE9NLnJlbmRlcihcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChHZW5pQmxvY2tzLkZlcnRpbGl6aW5nR2FtZXRlVmlldywge1xuICAgICAgICAgIHR5cGU6ICdtb3RoZXInLFxuICAgICAgICAgIGdhbWV0ZTogc2VsZWN0ZWRNb3RoZXJHYW1ldGUsIGlkOiBzZWxlY3RlZE1vdGhlckdhbWV0ZUlkLFxuICAgICAgICAgIGZlcnRpbGl6YXRpb25TdGF0ZTogZmVydGlsaXphdGlvblN0YXRlLCBcbiAgICAgICAgICBoaWRkZW5BbGxlbGVzOiBoaWRkZW5BbGxlbGVzLFxuICAgICAgICAgIHNyY1JlY3Q6IHNlbGVjdGVkTW90aGVyR2FtZXRlU3JjUmVjdCxcbiAgICAgICAgICBkc3RSZWN0OiBtb3RoZXJTZWxlY3RlZEdhbWV0ZVZpZXdwb3J0UmVjdCxcbiAgICAgICAgICBhbmltU3RpZmZuZXNzOiBhbmltU3RpZmZuZXNzLFxuICAgICAgICAgIG9uUmVzdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoZmVydGlsaXphdGlvblN0YXRlID09PSAnZmVydGlsaXppbmcnKSB7XG4gICAgICAgICAgICAgIGZlcnRpbGl6YXRpb25TdGF0ZSA9ICdmZXJ0aWxpemVkJztcbiAgICAgICAgICAgICAgLy8gY3VycmVudGx5IHdlIG11c3QgdW5tb3VudCB0byB0cmlnZ2VyIHRoZSBuZXh0IGFuaW1hdGlvbiBzdGFnZVxuICAgICAgICAgICAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3RoZXItc2VsZWN0ZWQtZ2FtZXRlJykpO1xuICAgICAgICAgICAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmYXRoZXItc2VsZWN0ZWQtZ2FtZXRlJykpO1xuICAgICAgICAgICAgICByZW5kZXJTZWxlY3RlZE1vdGhlckdhbWV0ZSgpO1xuICAgICAgICAgICAgICByZW5kZXJTZWxlY3RlZEZhdGhlckdhbWV0ZSgpO1xuICAgICAgICAgICAgICByZW5kZXJPZmZzcHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbW90aGVyLXNlbGVjdGVkLWdhbWV0ZScpXG4gICAgICApO1xuICAgICAgcHJldlNlbGVjdGVkTW90aGVyR2FtZXRlSWQgPSBzZWxlY3RlZE1vdGhlckdhbWV0ZUlkO1xuICAgIH1cbiAgfVxuICByZW5kZXJTZWxlY3RlZE1vdGhlckdhbWV0ZSgpO1xuXG4gIC8vIEZhdGhlciBzZWxlY3RlZCBnYW1ldGVcbiAgZnVuY3Rpb24gcmVuZGVyU2VsZWN0ZWRGYXRoZXJHYW1ldGUoKSB7XG4gICAgaWYgKCFzZWxlY3RlZEZhdGhlckdhbWV0ZUlkIHx8IChzZWxlY3RlZEZhdGhlckdhbWV0ZUlkICE9PSBwcmV2U2VsZWN0ZWRGYXRoZXJHYW1ldGVJZCkpIHtcbiAgICAgIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhdGhlci1zZWxlY3RlZC1nYW1ldGUnKSk7XG4gICAgfVxuICAgIGlmIChzZWxlY3RlZEZhdGhlckdhbWV0ZUlkKSB7XG4gICAgICB2YXIgZmF0aGVyU2VsZWN0ZWRHYW1ldGVWaWV3cG9ydFJlY3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmF0aGVyLXNlbGVjdGVkLWdhbWV0ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBSZWFjdERPTS5yZW5kZXIoXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2VuaUJsb2Nrcy5GZXJ0aWxpemluZ0dhbWV0ZVZpZXcsIHtcbiAgICAgICAgICB0eXBlOiAnZmF0aGVyJyxcbiAgICAgICAgICBnYW1ldGU6IHNlbGVjdGVkRmF0aGVyR2FtZXRlLCBpZDogc2VsZWN0ZWRGYXRoZXJHYW1ldGVJZCxcbiAgICAgICAgICBmZXJ0aWxpemF0aW9uU3RhdGU6IGZlcnRpbGl6YXRpb25TdGF0ZSwgXG4gICAgICAgICAgaGlkZGVuQWxsZWxlczogaGlkZGVuQWxsZWxlcyxcbiAgICAgICAgICBzcmNSZWN0OiBzZWxlY3RlZEZhdGhlckdhbWV0ZVNyY1JlY3QsXG4gICAgICAgICAgZHN0UmVjdDogZmF0aGVyU2VsZWN0ZWRHYW1ldGVWaWV3cG9ydFJlY3QsXG4gICAgICAgICAgYW5pbVN0aWZmbmVzczogYW5pbVN0aWZmbmVzc1xuICAgICAgICB9KSxcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZhdGhlci1zZWxlY3RlZC1nYW1ldGUnKVxuICAgICAgKTtcbiAgICAgIHByZXZTZWxlY3RlZEZhdGhlckdhbWV0ZUlkID0gc2VsZWN0ZWRGYXRoZXJHYW1ldGVJZDtcbiAgICB9XG4gIH1cbiAgcmVuZGVyU2VsZWN0ZWRGYXRoZXJHYW1ldGUoKTtcbn0gLy8gcmVuZGVyKClcblxuZnVuY3Rpb24gYnJlZWQoKSB7XG4gIGlmIChzZWxlY3RlZE1vdGhlckdhbWV0ZSAmJiBzZWxlY3RlZEZhdGhlckdhbWV0ZSkge1xuICAgIGZlcnRpbGl6YXRpb25TdGF0ZSA9ICdmZXJ0aWxpemluZyc7XG4gICAgb2Zmc3ByaW5nID0gQmlvTG9naWNhLk9yZ2FuaXNtLmNyZWF0ZUZyb21HYW1ldGVzKG1vdGhlci5zcGVjaWVzLCBzZWxlY3RlZE1vdGhlckdhbWV0ZSwgc2VsZWN0ZWRGYXRoZXJHYW1ldGUpO1xuICAgIHJlbmRlcigpO1xuICB9XG59XG5cbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYnJlZWQtYnV0dG9uXCIpLm9uY2xpY2sgPSBicmVlZDtcblxucmVuZGVyKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
