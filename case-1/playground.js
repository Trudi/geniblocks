'use strict';

var sexLabels = ['male', 'female'],
    orgAlleleString = "a:m,b:M,a:h,b:h,a:C,b:C,a:a,b:a,a:B,b:B,a:D,b:D,a:w,b:W,a:Fl,b:Fl,a:Hl,b:hl,a:T,b:t,a:rh,b:rh,a:Bog,b:Bog";
var drake = new BioLogica.Organism(BioLogica.Species.Drake, orgAlleleString, 1),
    sexOfDrake = 1;

function render() {
  // change sex buttons
  ReactDOM.render(React.createElement(GeniBlocks.ChangeSexButtons, {
    sex: sexLabels[sexOfDrake],
    species: "Drake",
    showLabel: true,
    onChange: function onChange(evt, iSex) {
      // replace alleles lost when switching to male and back
      var alleleString = GeniBlocks.GeneticsUtils.fillInMissingAllelesFromAlleleString(drake.genetics, drake.getAlleleString(), orgAlleleString);
      sexOfDrake = sexLabels.indexOf(iSex);
      drake = new BioLogica.Organism(BioLogica.Species.Drake, alleleString, sexOfDrake);
      render();
    }
  }), document.getElementById('change-sex-buttons'));

  // genome
  ReactDOM.render(React.createElement(GeniBlocks.GenomeView, {
    org: drake,
    hiddenAlleles: ['t', 'tk', 'h', 'c', 'a', 'b', 'd', 'bog', 'rh'],
    style: { marginTop: 50, top: 50 },
    alleleChanged: function alleleChanged(chrom, side, prevAllele, newAllele) {
      drake.genetics.genotype.replaceAlleleChromName(chrom, side, prevAllele, newAllele);
      drake = new BioLogica.Organism(BioLogica.Species.Drake, drake.getAlleleString(), sexOfDrake);
      render();
    }
  }), document.getElementById('drake-genome'));

  // drake
  ReactDOM.render(React.createElement(GeniBlocks.OrganismGlowView, { org: drake, color: '#FFFFAA', size: 200 }), document.getElementById('drake-image'));
}

document.getElementById("advance-button").onclick = function () {
  window.location.assign(window.location.href.replace("playground.html", "challenges.html?challenge=0"));
};

render();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhc2UtMS9wbGF5Z3JvdW5kLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxZQUFZLENBQUMsTUFBRCxFQUFTLFFBQVQsQ0FBWjtJQUNBLGtCQUFrQiwyR0FBbEI7QUFDTixJQUFNLFFBQVEsSUFBSSxVQUFVLFFBQVYsQ0FBbUIsVUFBVSxPQUFWLENBQWtCLEtBQWxCLEVBQXlCLGVBQWhELEVBQWlFLENBQWpFLENBQVI7SUFDQSxhQUFhLENBQWI7O0FBRU4sU0FBUyxNQUFULEdBQWtCOztBQUVoQixXQUFTLE1BQVQsQ0FDRSxNQUFNLGFBQU4sQ0FBb0IsV0FBVyxnQkFBWCxFQUE2QjtBQUMzQyxTQUFLLFVBQVUsVUFBVixDQUFMO0FBQ0EsYUFBUyxPQUFUO0FBQ0EsZUFBVyxJQUFYO0FBQ0EsY0FBVSxrQkFBUyxHQUFULEVBQWMsSUFBZCxFQUFvQjs7QUFFNUIsVUFBTSxlQUFlLFdBQVcsYUFBWCxDQUF5QixvQ0FBekIsQ0FDQyxNQUFNLFFBQU4sRUFBZ0IsTUFBTSxlQUFOLEVBRGpCLEVBQzBDLGVBRDFDLENBQWYsQ0FGc0I7QUFJNUIsbUJBQWEsVUFBVSxPQUFWLENBQWtCLElBQWxCLENBQWIsQ0FKNEI7QUFLNUIsY0FBUSxJQUFJLFVBQVUsUUFBVixDQUFtQixVQUFVLE9BQVYsQ0FBa0IsS0FBbEIsRUFBeUIsWUFBaEQsRUFBOEQsVUFBOUQsQ0FBUixDQUw0QjtBQU01QixlQU40QjtLQUFwQjtHQUpoQixDQURGLEVBY0UsU0FBUyxjQUFULENBQXdCLG9CQUF4QixDQWRGOzs7QUFGZ0IsVUFvQmhCLENBQVMsTUFBVCxDQUNFLE1BQU0sYUFBTixDQUFvQixXQUFXLFVBQVgsRUFBdUI7QUFDekMsU0FBSyxLQUFMO0FBQ0EsbUJBQWUsQ0FBQyxHQUFELEVBQUssSUFBTCxFQUFVLEdBQVYsRUFBYyxHQUFkLEVBQWtCLEdBQWxCLEVBQXNCLEdBQXRCLEVBQTBCLEdBQTFCLEVBQThCLEtBQTlCLEVBQW9DLElBQXBDLENBQWY7QUFDQSxXQUFPLEVBQUMsV0FBVyxFQUFYLEVBQWUsS0FBSyxFQUFMLEVBQXZCO0FBQ0EsbUJBQWUsdUJBQVMsS0FBVCxFQUFnQixJQUFoQixFQUFzQixVQUF0QixFQUFrQyxTQUFsQyxFQUE2QztBQUMxRCxZQUFNLFFBQU4sQ0FBZSxRQUFmLENBQXdCLHNCQUF4QixDQUErQyxLQUEvQyxFQUFzRCxJQUF0RCxFQUE0RCxVQUE1RCxFQUF3RSxTQUF4RSxFQUQwRDtBQUUxRCxjQUFRLElBQUksVUFBVSxRQUFWLENBQW1CLFVBQVUsT0FBVixDQUFrQixLQUFsQixFQUF5QixNQUFNLGVBQU4sRUFBaEQsRUFBeUUsVUFBekUsQ0FBUixDQUYwRDtBQUcxRCxlQUgwRDtLQUE3QztHQUpqQixDQURGLEVBV0UsU0FBUyxjQUFULENBQXdCLGNBQXhCLENBWEY7OztBQXBCZ0IsVUFtQ2hCLENBQVMsTUFBVCxDQUNFLE1BQU0sYUFBTixDQUFvQixXQUFXLGdCQUFYLEVBQTZCLEVBQUMsS0FBSyxLQUFMLEVBQVksT0FBTyxTQUFQLEVBQWtCLE1BQU0sR0FBTixFQUFoRixDQURGLEVBRUUsU0FBUyxjQUFULENBQXdCLGFBQXhCLENBRkYsRUFuQ2dCO0NBQWxCOztBQXdDQSxTQUFTLGNBQVQsQ0FBd0IsZ0JBQXhCLEVBQTBDLE9BQTFDLEdBQW9ELFlBQVc7QUFDN0QsU0FBTyxRQUFQLENBQWdCLE1BQWhCLENBQXVCLE9BQU8sUUFBUCxDQUFnQixJQUFoQixDQUFxQixPQUFyQixDQUE2QixpQkFBN0IsRUFBZ0QsNkJBQWhELENBQXZCLEVBRDZEO0NBQVg7O0FBSXBEIiwiZmlsZSI6ImNhc2UtMS9wbGF5Z3JvdW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc2V4TGFiZWxzID0gWydtYWxlJywgJ2ZlbWFsZSddLFxuICAgICAgb3JnQWxsZWxlU3RyaW5nID0gXCJhOm0sYjpNLGE6aCxiOmgsYTpDLGI6QyxhOmEsYjphLGE6QixiOkIsYTpELGI6RCxhOncsYjpXLGE6RmwsYjpGbCxhOkhsLGI6aGwsYTpULGI6dCxhOnJoLGI6cmgsYTpCb2csYjpCb2dcIjtcbmxldCAgIGRyYWtlID0gbmV3IEJpb0xvZ2ljYS5PcmdhbmlzbShCaW9Mb2dpY2EuU3BlY2llcy5EcmFrZSwgb3JnQWxsZWxlU3RyaW5nLCAxKSxcbiAgICAgIHNleE9mRHJha2UgPSAxO1xuXG5mdW5jdGlvbiByZW5kZXIoKSB7XG4gIC8vIGNoYW5nZSBzZXggYnV0dG9uc1xuICBSZWFjdERPTS5yZW5kZXIoXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChHZW5pQmxvY2tzLkNoYW5nZVNleEJ1dHRvbnMsIHtcbiAgICAgICAgICBzZXg6IHNleExhYmVsc1tzZXhPZkRyYWtlXSxcbiAgICAgICAgICBzcGVjaWVzOiBcIkRyYWtlXCIsXG4gICAgICAgICAgc2hvd0xhYmVsOiB0cnVlLFxuICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbihldnQsIGlTZXgpIHtcbiAgICAgICAgICAgIC8vIHJlcGxhY2UgYWxsZWxlcyBsb3N0IHdoZW4gc3dpdGNoaW5nIHRvIG1hbGUgYW5kIGJhY2tcbiAgICAgICAgICAgIGNvbnN0IGFsbGVsZVN0cmluZyA9IEdlbmlCbG9ja3MuR2VuZXRpY3NVdGlscy5maWxsSW5NaXNzaW5nQWxsZWxlc0Zyb21BbGxlbGVTdHJpbmcoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJha2UuZ2VuZXRpY3MsIGRyYWtlLmdldEFsbGVsZVN0cmluZygpLCBvcmdBbGxlbGVTdHJpbmcpO1xuICAgICAgICAgICAgc2V4T2ZEcmFrZSA9IHNleExhYmVscy5pbmRleE9mKGlTZXgpO1xuICAgICAgICAgICAgZHJha2UgPSBuZXcgQmlvTG9naWNhLk9yZ2FuaXNtKEJpb0xvZ2ljYS5TcGVjaWVzLkRyYWtlLCBhbGxlbGVTdHJpbmcsIHNleE9mRHJha2UpO1xuICAgICAgICAgICAgcmVuZGVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhbmdlLXNleC1idXR0b25zJylcbiAgKTtcblxuICAvLyBnZW5vbWVcbiAgUmVhY3RET00ucmVuZGVyKFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2VuaUJsb2Nrcy5HZW5vbWVWaWV3LCB7XG4gICAgICBvcmc6IGRyYWtlLFxuICAgICAgaGlkZGVuQWxsZWxlczogWyd0JywndGsnLCdoJywnYycsJ2EnLCdiJywnZCcsJ2JvZycsJ3JoJ10sXG4gICAgICBzdHlsZToge21hcmdpblRvcDogNTAsIHRvcDogNTB9LFxuICAgICAgYWxsZWxlQ2hhbmdlZDogZnVuY3Rpb24oY2hyb20sIHNpZGUsIHByZXZBbGxlbGUsIG5ld0FsbGVsZSkge1xuICAgICAgICBkcmFrZS5nZW5ldGljcy5nZW5vdHlwZS5yZXBsYWNlQWxsZWxlQ2hyb21OYW1lKGNocm9tLCBzaWRlLCBwcmV2QWxsZWxlLCBuZXdBbGxlbGUpO1xuICAgICAgICBkcmFrZSA9IG5ldyBCaW9Mb2dpY2EuT3JnYW5pc20oQmlvTG9naWNhLlNwZWNpZXMuRHJha2UsIGRyYWtlLmdldEFsbGVsZVN0cmluZygpLCBzZXhPZkRyYWtlKTtcbiAgICAgICAgcmVuZGVyKCk7XG4gICAgICB9XG4gICAgfSksXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RyYWtlLWdlbm9tZScpXG4gICk7XG5cbiAgLy8gZHJha2VcbiAgUmVhY3RET00ucmVuZGVyKFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2VuaUJsb2Nrcy5PcmdhbmlzbUdsb3dWaWV3LCB7b3JnOiBkcmFrZSwgY29sb3I6ICcjRkZGRkFBJywgc2l6ZTogMjAwfSksXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RyYWtlLWltYWdlJykpO1xufVxuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFkdmFuY2UtYnV0dG9uXCIpLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKFwicGxheWdyb3VuZC5odG1sXCIsIFwiY2hhbGxlbmdlcy5odG1sP2NoYWxsZW5nZT0wXCIpKTtcbn07XG5cbnJlbmRlcigpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
