'use strict';

var sexLabels = ['male', 'female'],
    orgAlleleString = "a:m,b:M,a:h,b:h,a:C,b:C,a:a,b:a,a:B,b:B,a:D,b:D,a:w,b:W,a:Fl,b:Fl,a:Hl,b:hl,a:T,b:t,a:rh,b:rh,a:Bog,b:Bog";
var drake = new BioLogica.Organism(BioLogica.Species.Drake, orgAlleleString, 1),
    sexOfDrake = 1;

function render() {
  // change sex buttons
  ReactDOM.render(React.createElement(GeniBlocks.ChangeSexButtons, {
    sex: sexLabels[sexOfDrake],
    species: "Drake",
    showLabel: true,
    onChange: function onChange(evt, iSex) {
      // replace alleles lost when switching to male and back
      var alleleString = GeniBlocks.GeneticsUtils.fillInMissingAllelesFromAlleleString(drake.genetics, drake.getAlleleString(), orgAlleleString);
      sexOfDrake = sexLabels.indexOf(iSex);
      drake = new BioLogica.Organism(BioLogica.Species.Drake, alleleString, sexOfDrake);
      render();
    }
  }), document.getElementById('change-sex-buttons'));

  // genome
  ReactDOM.render(React.createElement(GeniBlocks.GenomeView, {
    org: drake,
    hiddenAlleles: ['t', 'tk', 'h', 'c', 'a', 'b', 'd', 'bog', 'rh'],
    style: { marginTop: 50, top: 50 },
    alleleChanged: function alleleChanged(chrom, side, prevAllele, newAllele) {
      drake.genetics.genotype.chromosomes[chrom][side].alleles.replaceFirst(prevAllele, newAllele);
      drake = new BioLogica.Organism(BioLogica.Species.Drake, drake.getAlleleString(), sexOfDrake);
      render();
    }
  }), document.getElementById('drake-genome'));

  // drake
  ReactDOM.render(React.createElement(GeniBlocks.OrganismGlowView, { org: drake, color: '#FFFFAA', size: 200 }), document.getElementById('drake-image'));
}

document.getElementById("advance-button").onclick = function () {
  window.location.assign(window.location.href.replace("playground.html", "challenges.html?challenge=0"));
};

render();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhc2UtMS9wbGF5Z3JvdW5kLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxZQUFZLENBQUMsTUFBRCxFQUFTLFFBQVQsQ0FBWjtJQUNBLGtCQUFrQiwyR0FBbEI7QUFDTixJQUFNLFFBQVEsSUFBSSxVQUFVLFFBQVYsQ0FBbUIsVUFBVSxPQUFWLENBQWtCLEtBQWxCLEVBQXlCLGVBQWhELEVBQWlFLENBQWpFLENBQVI7SUFDQSxhQUFhLENBQWI7O0FBRU4sU0FBUyxNQUFULEdBQWtCOztBQUVoQixXQUFTLE1BQVQsQ0FDRSxNQUFNLGFBQU4sQ0FBb0IsV0FBVyxnQkFBWCxFQUE2QjtBQUMzQyxTQUFLLFVBQVUsVUFBVixDQUFMO0FBQ0EsYUFBUyxPQUFUO0FBQ0EsZUFBVyxJQUFYO0FBQ0EsY0FBVSxrQkFBUyxHQUFULEVBQWMsSUFBZCxFQUFvQjs7QUFFNUIsVUFBTSxlQUFlLFdBQVcsYUFBWCxDQUF5QixvQ0FBekIsQ0FDQyxNQUFNLFFBQU4sRUFBZ0IsTUFBTSxlQUFOLEVBRGpCLEVBQzBDLGVBRDFDLENBQWYsQ0FGc0I7QUFJNUIsbUJBQWEsVUFBVSxPQUFWLENBQWtCLElBQWxCLENBQWIsQ0FKNEI7QUFLNUIsY0FBUSxJQUFJLFVBQVUsUUFBVixDQUFtQixVQUFVLE9BQVYsQ0FBa0IsS0FBbEIsRUFBeUIsWUFBaEQsRUFBOEQsVUFBOUQsQ0FBUixDQUw0QjtBQU01QixlQU40QjtLQUFwQjtHQUpoQixDQURGLEVBY0UsU0FBUyxjQUFULENBQXdCLG9CQUF4QixDQWRGOzs7QUFGZ0IsVUFvQmhCLENBQVMsTUFBVCxDQUNFLE1BQU0sYUFBTixDQUFvQixXQUFXLFVBQVgsRUFBdUI7QUFDekMsU0FBSyxLQUFMO0FBQ0EsbUJBQWUsQ0FBQyxHQUFELEVBQUssSUFBTCxFQUFVLEdBQVYsRUFBYyxHQUFkLEVBQWtCLEdBQWxCLEVBQXNCLEdBQXRCLEVBQTBCLEdBQTFCLEVBQThCLEtBQTlCLEVBQW9DLElBQXBDLENBQWY7QUFDQSxXQUFPLEVBQUMsV0FBVyxFQUFYLEVBQWUsS0FBSyxFQUFMLEVBQXZCO0FBQ0EsbUJBQWUsdUJBQVMsS0FBVCxFQUFnQixJQUFoQixFQUFzQixVQUF0QixFQUFrQyxTQUFsQyxFQUE2QztBQUMxRCxZQUFNLFFBQU4sQ0FBZSxRQUFmLENBQXdCLFdBQXhCLENBQW9DLEtBQXBDLEVBQTJDLElBQTNDLEVBQWlELE9BQWpELENBQXlELFlBQXpELENBQXNFLFVBQXRFLEVBQWtGLFNBQWxGLEVBRDBEO0FBRTFELGNBQVEsSUFBSSxVQUFVLFFBQVYsQ0FBbUIsVUFBVSxPQUFWLENBQWtCLEtBQWxCLEVBQXlCLE1BQU0sZUFBTixFQUFoRCxFQUF5RSxVQUF6RSxDQUFSLENBRjBEO0FBRzFELGVBSDBEO0tBQTdDO0dBSmpCLENBREYsRUFXRSxTQUFTLGNBQVQsQ0FBd0IsY0FBeEIsQ0FYRjs7O0FBcEJnQixVQW1DaEIsQ0FBUyxNQUFULENBQ0UsTUFBTSxhQUFOLENBQW9CLFdBQVcsZ0JBQVgsRUFBNkIsRUFBQyxLQUFLLEtBQUwsRUFBWSxPQUFPLFNBQVAsRUFBa0IsTUFBTSxHQUFOLEVBQWhGLENBREYsRUFFRSxTQUFTLGNBQVQsQ0FBd0IsYUFBeEIsQ0FGRixFQW5DZ0I7Q0FBbEI7O0FBd0NBLFNBQVMsY0FBVCxDQUF3QixnQkFBeEIsRUFBMEMsT0FBMUMsR0FBb0QsWUFBVztBQUM3RCxTQUFPLFFBQVAsQ0FBZ0IsTUFBaEIsQ0FBdUIsT0FBTyxRQUFQLENBQWdCLElBQWhCLENBQXFCLE9BQXJCLENBQTZCLGlCQUE3QixFQUFnRCw2QkFBaEQsQ0FBdkIsRUFENkQ7Q0FBWDs7QUFJcEQiLCJmaWxlIjoiY2FzZS0xL3BsYXlncm91bmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzZXhMYWJlbHMgPSBbJ21hbGUnLCAnZmVtYWxlJ10sXG4gICAgICBvcmdBbGxlbGVTdHJpbmcgPSBcImE6bSxiOk0sYTpoLGI6aCxhOkMsYjpDLGE6YSxiOmEsYTpCLGI6QixhOkQsYjpELGE6dyxiOlcsYTpGbCxiOkZsLGE6SGwsYjpobCxhOlQsYjp0LGE6cmgsYjpyaCxhOkJvZyxiOkJvZ1wiO1xubGV0ICAgZHJha2UgPSBuZXcgQmlvTG9naWNhLk9yZ2FuaXNtKEJpb0xvZ2ljYS5TcGVjaWVzLkRyYWtlLCBvcmdBbGxlbGVTdHJpbmcsIDEpLFxuICAgICAgc2V4T2ZEcmFrZSA9IDE7XG5cbmZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgLy8gY2hhbmdlIHNleCBidXR0b25zXG4gIFJlYWN0RE9NLnJlbmRlcihcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdlbmlCbG9ja3MuQ2hhbmdlU2V4QnV0dG9ucywge1xuICAgICAgICAgIHNleDogc2V4TGFiZWxzW3NleE9mRHJha2VdLFxuICAgICAgICAgIHNwZWNpZXM6IFwiRHJha2VcIixcbiAgICAgICAgICBzaG93TGFiZWw6IHRydWUsXG4gICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uKGV2dCwgaVNleCkge1xuICAgICAgICAgICAgLy8gcmVwbGFjZSBhbGxlbGVzIGxvc3Qgd2hlbiBzd2l0Y2hpbmcgdG8gbWFsZSBhbmQgYmFja1xuICAgICAgICAgICAgY29uc3QgYWxsZWxlU3RyaW5nID0gR2VuaUJsb2Nrcy5HZW5ldGljc1V0aWxzLmZpbGxJbk1pc3NpbmdBbGxlbGVzRnJvbUFsbGVsZVN0cmluZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFrZS5nZW5ldGljcywgZHJha2UuZ2V0QWxsZWxlU3RyaW5nKCksIG9yZ0FsbGVsZVN0cmluZyk7XG4gICAgICAgICAgICBzZXhPZkRyYWtlID0gc2V4TGFiZWxzLmluZGV4T2YoaVNleCk7XG4gICAgICAgICAgICBkcmFrZSA9IG5ldyBCaW9Mb2dpY2EuT3JnYW5pc20oQmlvTG9naWNhLlNwZWNpZXMuRHJha2UsIGFsbGVsZVN0cmluZywgc2V4T2ZEcmFrZSk7XG4gICAgICAgICAgICByZW5kZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFuZ2Utc2V4LWJ1dHRvbnMnKVxuICApO1xuXG4gIC8vIGdlbm9tZVxuICBSZWFjdERPTS5yZW5kZXIoXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChHZW5pQmxvY2tzLkdlbm9tZVZpZXcsIHtcbiAgICAgIG9yZzogZHJha2UsXG4gICAgICBoaWRkZW5BbGxlbGVzOiBbJ3QnLCd0aycsJ2gnLCdjJywnYScsJ2InLCdkJywnYm9nJywncmgnXSxcbiAgICAgIHN0eWxlOiB7bWFyZ2luVG9wOiA1MCwgdG9wOiA1MH0sXG4gICAgICBhbGxlbGVDaGFuZ2VkOiBmdW5jdGlvbihjaHJvbSwgc2lkZSwgcHJldkFsbGVsZSwgbmV3QWxsZWxlKSB7XG4gICAgICAgIGRyYWtlLmdlbmV0aWNzLmdlbm90eXBlLmNocm9tb3NvbWVzW2Nocm9tXVtzaWRlXS5hbGxlbGVzLnJlcGxhY2VGaXJzdChwcmV2QWxsZWxlLCBuZXdBbGxlbGUpO1xuICAgICAgICBkcmFrZSA9IG5ldyBCaW9Mb2dpY2EuT3JnYW5pc20oQmlvTG9naWNhLlNwZWNpZXMuRHJha2UsIGRyYWtlLmdldEFsbGVsZVN0cmluZygpLCBzZXhPZkRyYWtlKTtcbiAgICAgICAgcmVuZGVyKCk7XG4gICAgICB9XG4gICAgfSksXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RyYWtlLWdlbm9tZScpXG4gICk7XG5cbiAgLy8gZHJha2VcbiAgUmVhY3RET00ucmVuZGVyKFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2VuaUJsb2Nrcy5PcmdhbmlzbUdsb3dWaWV3LCB7b3JnOiBkcmFrZSwgY29sb3I6ICcjRkZGRkFBJywgc2l6ZTogMjAwfSksXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RyYWtlLWltYWdlJykpO1xufVxuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFkdmFuY2UtYnV0dG9uXCIpLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih3aW5kb3cubG9jYXRpb24uaHJlZi5yZXBsYWNlKFwicGxheWdyb3VuZC5odG1sXCIsIFwiY2hhbGxlbmdlcy5odG1sP2NoYWxsZW5nZT0wXCIpKTtcbn07XG5cbnJlbmRlcigpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
