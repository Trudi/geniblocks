'use strict';

var challengeLabels = ['challenge-0', 'challenge-1', 'challenge-2'],
    challengeCount = challengeLabels.length,
    sexLabels = ['male', 'female'],
    organismAlleles = "a:h,b:h,a:C,b:C,a:a,b:a,a:B,b:B,a:D,b:D,a:T,b:t,a:rh,b:rh,a:Bog,b:Bog",
    hiddenAlleles = ['t', 'tk', 'h', 'c', 'a', 'b', 'd', 'bog', 'rh'];
var sexOfTargetDrake = undefined,
    targetDrake = undefined,
    sexOfYourDrake = undefined,
    yourDrake = undefined,
    requiredMoveCount = undefined,
    showDrakeForConfirmation = false,
    trialCount = 1,
    trialIndex = 1,
    moveCount = 0;

function parseQueryString(queryString) {
  var params = {},
      queries = undefined,
      temp = undefined,
      i = undefined,
      l = undefined;

  // Split into key/value pairs
  queries = queryString.split('&');

  // Convert the array of strings into an object
  for (i = 0, l = queries.length; i < l; i++) {
    temp = queries[i].split('=');
    params[temp[0]] = temp[1];
  }

  return params;
}

var urlParams = parseQueryString(window.location.search.substring(1)),
    challengeParam = urlParams.challenge && Number(urlParams.challenge),
    challenge = challengeParam >= 0 && challengeParam < challengeCount ? challengeParam : 0;

if (challenge >= 2) trialCount = 3;

function resetDrakes() {
  requiredMoveCount = 0;
  // regenerate if we generate drakes that are too close to each other
  while (requiredMoveCount < 3) {
    sexOfTargetDrake = Math.floor(2 * Math.random());
    targetDrake = new BioLogica.Organism(BioLogica.Species.Drake, organismAlleles, sexOfTargetDrake);
    sexOfYourDrake = Math.floor(2 * Math.random());
    yourDrake = new BioLogica.Organism(BioLogica.Species.Drake, organismAlleles, sexOfYourDrake);
    // add one for clicking the "Check Drake" button
    requiredMoveCount = GeniBlocks.GeneticsUtils.numberOfChangesToReachPhenotype(yourDrake, targetDrake) + 1;
  }
  render();
}

function render() {
  // target drake
  ReactDOM.render(React.createElement(GeniBlocks.OrganismGlowView, { org: targetDrake, color: '#FFFFAA', size: 200 }), document.getElementById('target-drake'));

  // trial feedback
  ReactDOM.render(React.createElement(GeniBlocks.FeedbackView, {
    text: ["TRIAL", trialIndex + ' of ' + trialCount]
  }), document.getElementById('trial-feedback'));

  // goal feedback
  ReactDOM.render(React.createElement(GeniBlocks.FeedbackView, {
    text: ['GOAL is ' + requiredMoveCount + ' MOVES', 'Your moves: ' + moveCount]
  }), document.getElementById('goal-feedback'));

  // your drake
  ReactDOM.render(React.createElement(GeniBlocks.QuestionOrganismGlowView, { hidden: challenge > 0 && !showDrakeForConfirmation,
    org: yourDrake, color: '#FFFFAA', size: 200 }), document.getElementById('your-drake'));
  // ReactDOM.render(
  //   React.createElement(GeniBlocks.HidableOrganismGlowView,
  //                       {hidden: true, org: yourDrake, color: '#FFFFAA', size: 200}),
  //   document.getElementById('your-drake'));

  // change sex buttons
  ReactDOM.render(React.createElement(GeniBlocks.ChangeSexButtons, {
    sex: sexLabels[sexOfYourDrake],
    species: "Drake",
    onChange: function onChange(evt, iSex) {
      // replace alleles lost when switching to male and back
      var alleleString = GeniBlocks.GeneticsUtils.fillInMissingAllelesFromAlleleString(yourDrake.genetics, yourDrake.getAlleleString(), organismAlleles);
      sexOfYourDrake = sexLabels.indexOf(iSex);
      yourDrake = new BioLogica.Organism(BioLogica.Species.Drake, alleleString, sexOfYourDrake);
      ++moveCount;
      render();
    }
  }), document.getElementById('change-sex-buttons'));

  // genome
  ReactDOM.render(React.createElement(GeniBlocks.GenomeView, {
    org: yourDrake,
    hiddenAlleles: hiddenAlleles,
    style: { marginTop: 50, top: 50 },
    alleleChanged: function alleleChanged(chrom, side, prevAllele, newAllele) {
      yourDrake.genetics.genotype.chromosomes[chrom][side].alleles.replaceFirst(prevAllele, newAllele);
      yourDrake = new BioLogica.Organism(BioLogica.Species.Drake, yourDrake.getAlleleString(), sexOfYourDrake);
      ++moveCount;
      render();
    }
  }), document.getElementById('drake-genome'));
}

/*eslint no-unused-vars: [1, { "varsIgnorePattern": "resetChallenge|nextChallenge|advanceTrial" }]*/
var resetChallenge = function resetChallenge() {
  trialIndex = 1;
  moveCount = 0;
  resetDrakes();
};

var nextChallenge = function nextChallenge() {
  var url = window.location.href,
      nextUrl = undefined;
  if (challenge < 2) {
    nextUrl = url.replace('challenge=' + challenge, 'challenge=' + (challenge + 1));
  } else {
    var case1Index = url.indexOf('case-1');
    nextUrl = url.substr(0, case1Index);
  }
  window.location.assign(nextUrl);
};

var advanceTrial = function advanceTrial() {
  if (challenge >= 2) {
    if (trialIndex >= trialCount) {
      showAlert(true, {
        title: "Congratulations!",
        message1: "You've completed all the trials in this challenge.",
        okButton: "Go back to the Case Log",
        okCallback: "nextChallenge",
        tryButton: "Try Again",
        tryCallback: "resetChallenge"
      });
      return;
    }
    ++trialIndex;
  }
  moveCount = 0;
  resetDrakes();
};

function showAlert(iShow, iOptions) {
  var displayMode = iShow ? 'block' : 'none';
  if (iShow) {
    document.getElementById("alert-title").innerHTML = iOptions.title || "";
    document.getElementById("alert-message1").innerHTML = iOptions.message1 || "";
    document.getElementById("alert-message2").innerHTML = iOptions.message2 || "";
    document.getElementById("alert-ok-button").innerHTML = iOptions.okButton || "";
    document.getElementById("alert-ok-button").style.display = iOptions.okButton ? 'block' : 'none';
    document.getElementById("alert-ok-button").dataset.okCallback = iOptions.okCallback || '';
    document.getElementById("alert-try-button").innerHTML = iOptions.tryButton || "";
    document.getElementById("alert-try-button").style.display = iOptions.tryButton ? 'block' : 'none';
    document.getElementById("alert-try-button").dataset.tryCallback = iOptions.tryCallback || '';
  }
  document.getElementById("overlay").style.display = displayMode;
  document.getElementById("alert-wrapper").style.display = displayMode;
}

document.getElementById("test-drake-button").onclick = function () {
  // Checking the answer counts as a move
  ++moveCount;
  showDrakeForConfirmation = true;
  render();

  if (0 === GeniBlocks.GeneticsUtils.numberOfChangesToReachPhenotype(yourDrake, targetDrake)) {
    if (challenge <= 1) {
      showAlert(true, {
        title: "Good work!",
        message1: "The drake you have created matches the target drake.",
        okButton: "Next Challenge",
        okCallback: "nextChallenge",
        tryButton: "Try Again",
        tryCallback: "resetChallenge"
      });
    } else {
      showAlert(true, {
        title: "Good work!",
        message1: "The drake you have created matches the target drake.",
        okButton: "OK",
        okCallback: "advanceTrial"
      });
    }
  } else {
    showAlert(true, {
      title: "That's not the drake!",
      message1: "The drake you have created doesn't match the target drake.\nPlease try again.",
      tryButton: "Try Again"
    });
    render();
  }
};

document.getElementById("alert-ok-button").onclick = function (evt) {
  showAlert(false);
  showDrakeForConfirmation = false;
  if (evt.target.dataset.okCallback && window[evt.target.dataset.okCallback]) window[evt.target.dataset.okCallback].call();
  render();
};

document.getElementById("alert-try-button").onclick = function (evt) {
  showAlert(false);
  showDrakeForConfirmation = false;
  if (evt.target.dataset.tryCallback && window[evt.target.dataset.tryCallback]) window[evt.target.dataset.tryCallback].call();
  render();
};

resetDrakes();
//# sourceMappingURL=data:application/json;base64,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TUFvQks7QUFDSCxjQUFVLElBQVYsRUFBZ0I7QUFDRSxhQUFPLHVCQUFQO0FBQ0EsZ0JBQVUsK0VBQVY7QUFDQSxpQkFBVyxXQUFYO0tBSGxCLEVBREc7QUFNSCxhQU5HO0dBcEJMO0NBTnFEOztBQW9DdkQsU0FBUyxjQUFULENBQXdCLGlCQUF4QixFQUEyQyxPQUEzQyxHQUFxRCxVQUFTLEdBQVQsRUFBYztBQUNqRSxZQUFVLEtBQVYsRUFEaUU7QUFFakUsNkJBQTJCLEtBQTNCLENBRmlFO0FBR2pFLE1BQUksSUFBSSxNQUFKLENBQVcsT0FBWCxDQUFtQixVQUFuQixJQUFpQyxPQUFPLElBQUksTUFBSixDQUFXLE9BQVgsQ0FBbUIsVUFBbkIsQ0FBeEMsRUFDRixPQUFPLElBQUksTUFBSixDQUFXLE9BQVgsQ0FBbUIsVUFBbkIsQ0FBUCxDQUFzQyxJQUF0QyxHQURGO0FBRUEsV0FMaUU7Q0FBZDs7QUFRckQsU0FBUyxjQUFULENBQXdCLGtCQUF4QixFQUE0QyxPQUE1QyxHQUFzRCxVQUFTLEdBQVQsRUFBYztBQUNsRSxZQUFVLEtBQVYsRUFEa0U7QUFFbEUsNkJBQTJCLEtBQTNCLENBRmtFO0FBR2xFLE1BQUksSUFBSSxNQUFKLENBQVcsT0FBWCxDQUFtQixXQUFuQixJQUFrQyxPQUFPLElBQUksTUFBSixDQUFXLE9BQVgsQ0FBbUIsV0FBbkIsQ0FBekMsRUFDRixPQUFPLElBQUksTUFBSixDQUFXLE9BQVgsQ0FBbUIsV0FBbkIsQ0FBUCxDQUF1QyxJQUF2QyxHQURGO0FBRUEsV0FMa0U7Q0FBZDs7QUFRdEQiLCJmaWxlIjoiY2FzZS0xL2NoYWxsZW5nZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjaGFsbGVuZ2VMYWJlbHMgPSBbJ2NoYWxsZW5nZS0wJywgJ2NoYWxsZW5nZS0xJywgJ2NoYWxsZW5nZS0yJ10sXG4gICAgICBjaGFsbGVuZ2VDb3VudCA9IGNoYWxsZW5nZUxhYmVscy5sZW5ndGgsXG4gICAgICBzZXhMYWJlbHMgPSBbJ21hbGUnLCAnZmVtYWxlJ10sXG4gICAgICBvcmdhbmlzbUFsbGVsZXMgPSBcImE6aCxiOmgsYTpDLGI6QyxhOmEsYjphLGE6QixiOkIsYTpELGI6RCxhOlQsYjp0LGE6cmgsYjpyaCxhOkJvZyxiOkJvZ1wiLFxuICAgICAgaGlkZGVuQWxsZWxlcyA9IFsndCcsJ3RrJywnaCcsJ2MnLCdhJywnYicsJ2QnLCdib2cnLCdyaCddO1xubGV0ICAgc2V4T2ZUYXJnZXREcmFrZSxcbiAgICAgIHRhcmdldERyYWtlLFxuICAgICAgc2V4T2ZZb3VyRHJha2UsXG4gICAgICB5b3VyRHJha2UsXG4gICAgICByZXF1aXJlZE1vdmVDb3VudCxcbiAgICAgIHNob3dEcmFrZUZvckNvbmZpcm1hdGlvbiA9IGZhbHNlLFxuICAgICAgdHJpYWxDb3VudCA9IDEsXG4gICAgICB0cmlhbEluZGV4ID0gMSxcbiAgICAgIG1vdmVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmcocXVlcnlTdHJpbmcpIHtcbiAgICBsZXQgcGFyYW1zID0ge30sIHF1ZXJpZXMsIHRlbXAsIGksIGw7XG5cbiAgICAvLyBTcGxpdCBpbnRvIGtleS92YWx1ZSBwYWlyc1xuICAgIHF1ZXJpZXMgPSBxdWVyeVN0cmluZy5zcGxpdCgnJicpO1xuXG4gICAgLy8gQ29udmVydCB0aGUgYXJyYXkgb2Ygc3RyaW5ncyBpbnRvIGFuIG9iamVjdFxuICAgIGZvciAoIGkgPSAwLCBsID0gcXVlcmllcy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG4gICAgICAgIHRlbXAgPSBxdWVyaWVzW2ldLnNwbGl0KCc9Jyk7XG4gICAgICAgIHBhcmFtc1t0ZW1wWzBdXSA9IHRlbXBbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtcztcbn1cblxubGV0IHVybFBhcmFtcyA9IHBhcnNlUXVlcnlTdHJpbmcoKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpLnN1YnN0cmluZygxKSksXG4gICAgY2hhbGxlbmdlUGFyYW0gPSB1cmxQYXJhbXMuY2hhbGxlbmdlICYmIE51bWJlcih1cmxQYXJhbXMuY2hhbGxlbmdlKSxcbiAgICBjaGFsbGVuZ2UgPSAoY2hhbGxlbmdlUGFyYW0gPj0gMCkgJiYgKGNoYWxsZW5nZVBhcmFtIDwgY2hhbGxlbmdlQ291bnQpID8gY2hhbGxlbmdlUGFyYW0gOiAwO1xuXG5pZiAoY2hhbGxlbmdlID49IDIpXG4gIHRyaWFsQ291bnQgPSAzO1xuXG5mdW5jdGlvbiByZXNldERyYWtlcygpIHtcbiAgcmVxdWlyZWRNb3ZlQ291bnQgPSAwO1xuICAvLyByZWdlbmVyYXRlIGlmIHdlIGdlbmVyYXRlIGRyYWtlcyB0aGF0IGFyZSB0b28gY2xvc2UgdG8gZWFjaCBvdGhlclxuICB3aGlsZSAocmVxdWlyZWRNb3ZlQ291bnQgPCAzKSB7XG4gICAgc2V4T2ZUYXJnZXREcmFrZSA9IE1hdGguZmxvb3IoMiAqIE1hdGgucmFuZG9tKCkpO1xuICAgIHRhcmdldERyYWtlID0gbmV3IEJpb0xvZ2ljYS5PcmdhbmlzbShCaW9Mb2dpY2EuU3BlY2llcy5EcmFrZSwgb3JnYW5pc21BbGxlbGVzLCBzZXhPZlRhcmdldERyYWtlKTtcbiAgICBzZXhPZllvdXJEcmFrZSA9IE1hdGguZmxvb3IoMiAqIE1hdGgucmFuZG9tKCkpO1xuICAgIHlvdXJEcmFrZSA9IG5ldyBCaW9Mb2dpY2EuT3JnYW5pc20oQmlvTG9naWNhLlNwZWNpZXMuRHJha2UsIG9yZ2FuaXNtQWxsZWxlcywgc2V4T2ZZb3VyRHJha2UpO1xuICAgIC8vIGFkZCBvbmUgZm9yIGNsaWNraW5nIHRoZSBcIkNoZWNrIERyYWtlXCIgYnV0dG9uXG4gICAgcmVxdWlyZWRNb3ZlQ291bnQgPSBHZW5pQmxvY2tzLkdlbmV0aWNzVXRpbHMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlck9mQ2hhbmdlc1RvUmVhY2hQaGVub3R5cGUoeW91ckRyYWtlLCB0YXJnZXREcmFrZSkgKyAxO1xuICB9XG4gIHJlbmRlcigpO1xufVxuXG5mdW5jdGlvbiByZW5kZXIoKSB7XG4gIC8vIHRhcmdldCBkcmFrZVxuICBSZWFjdERPTS5yZW5kZXIoXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChHZW5pQmxvY2tzLk9yZ2FuaXNtR2xvd1ZpZXcsIHtvcmc6IHRhcmdldERyYWtlLCBjb2xvcjogJyNGRkZGQUEnLCBzaXplOiAyMDB9KSxcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFyZ2V0LWRyYWtlJykpO1xuXG4gIC8vIHRyaWFsIGZlZWRiYWNrXG4gIFJlYWN0RE9NLnJlbmRlcihcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdlbmlCbG9ja3MuRmVlZGJhY2tWaWV3LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRSSUFMXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7dHJpYWxJbmRleH0gb2YgJHt0cmlhbENvdW50fWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RyaWFsLWZlZWRiYWNrJykpO1xuXG4gIC8vIGdvYWwgZmVlZGJhY2tcbiAgUmVhY3RET00ucmVuZGVyKFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoR2VuaUJsb2Nrcy5GZWVkYmFja1ZpZXcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBHT0FMIGlzICR7cmVxdWlyZWRNb3ZlQ291bnR9IE1PVkVTYCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgWW91ciBtb3ZlczogJHttb3ZlQ291bnR9YFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ29hbC1mZWVkYmFjaycpKTtcblxuICAvLyB5b3VyIGRyYWtlXG4gIFJlYWN0RE9NLnJlbmRlcihcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdlbmlCbG9ja3MuUXVlc3Rpb25PcmdhbmlzbUdsb3dWaWV3LFxuICAgICAgICAgICAgICAgICAgICAgICAge2hpZGRlbjogKGNoYWxsZW5nZSA+IDApICYmICFzaG93RHJha2VGb3JDb25maXJtYXRpb24sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvcmc6IHlvdXJEcmFrZSwgY29sb3I6ICcjRkZGRkFBJywgc2l6ZTogMjAwfSksXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3lvdXItZHJha2UnKSk7XG4gIC8vIFJlYWN0RE9NLnJlbmRlcihcbiAgLy8gICBSZWFjdC5jcmVhdGVFbGVtZW50KEdlbmlCbG9ja3MuSGlkYWJsZU9yZ2FuaXNtR2xvd1ZpZXcsXG4gIC8vICAgICAgICAgICAgICAgICAgICAgICB7aGlkZGVuOiB0cnVlLCBvcmc6IHlvdXJEcmFrZSwgY29sb3I6ICcjRkZGRkFBJywgc2l6ZTogMjAwfSksXG4gIC8vICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3lvdXItZHJha2UnKSk7XG5cbiAgLy8gY2hhbmdlIHNleCBidXR0b25zXG4gIFJlYWN0RE9NLnJlbmRlcihcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KEdlbmlCbG9ja3MuQ2hhbmdlU2V4QnV0dG9ucywge1xuICAgICAgICAgIHNleDogc2V4TGFiZWxzW3NleE9mWW91ckRyYWtlXSxcbiAgICAgICAgICBzcGVjaWVzOiBcIkRyYWtlXCIsXG4gICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uKGV2dCwgaVNleCkge1xuICAgICAgICAgICAgLy8gcmVwbGFjZSBhbGxlbGVzIGxvc3Qgd2hlbiBzd2l0Y2hpbmcgdG8gbWFsZSBhbmQgYmFja1xuICAgICAgICAgICAgY29uc3QgYWxsZWxlU3RyaW5nID0gR2VuaUJsb2Nrcy5HZW5ldGljc1V0aWxzLmZpbGxJbk1pc3NpbmdBbGxlbGVzRnJvbUFsbGVsZVN0cmluZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VyRHJha2UuZ2VuZXRpY3MsIHlvdXJEcmFrZS5nZXRBbGxlbGVTdHJpbmcoKSwgb3JnYW5pc21BbGxlbGVzKTtcbiAgICAgICAgICAgIHNleE9mWW91ckRyYWtlID0gc2V4TGFiZWxzLmluZGV4T2YoaVNleCk7XG4gICAgICAgICAgICB5b3VyRHJha2UgPSBuZXcgQmlvTG9naWNhLk9yZ2FuaXNtKEJpb0xvZ2ljYS5TcGVjaWVzLkRyYWtlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsZWxlU3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V4T2ZZb3VyRHJha2UpO1xuICAgICAgICAgICAgKyttb3ZlQ291bnQ7XG4gICAgICAgICAgICByZW5kZXIoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGFuZ2Utc2V4LWJ1dHRvbnMnKVxuICApO1xuXG4gIC8vIGdlbm9tZVxuICBSZWFjdERPTS5yZW5kZXIoXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChHZW5pQmxvY2tzLkdlbm9tZVZpZXcsIHtcbiAgICAgIG9yZzogeW91ckRyYWtlLFxuICAgICAgaGlkZGVuQWxsZWxlczogaGlkZGVuQWxsZWxlcyxcbiAgICAgIHN0eWxlOiB7bWFyZ2luVG9wOiA1MCwgdG9wOiA1MH0sXG4gICAgICBhbGxlbGVDaGFuZ2VkOiBmdW5jdGlvbihjaHJvbSwgc2lkZSwgcHJldkFsbGVsZSwgbmV3QWxsZWxlKSB7XG4gICAgICAgIHlvdXJEcmFrZS5nZW5ldGljcy5nZW5vdHlwZS5jaHJvbW9zb21lc1tjaHJvbV1bc2lkZV0uYWxsZWxlcy5yZXBsYWNlRmlyc3QocHJldkFsbGVsZSwgbmV3QWxsZWxlKTtcbiAgICAgICAgeW91ckRyYWtlID0gbmV3IEJpb0xvZ2ljYS5PcmdhbmlzbShCaW9Mb2dpY2EuU3BlY2llcy5EcmFrZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91ckRyYWtlLmdldEFsbGVsZVN0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXhPZllvdXJEcmFrZSk7XG4gICAgICAgICsrbW92ZUNvdW50O1xuICAgICAgICByZW5kZXIoKTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHJha2UtZ2Vub21lJylcbiAgKTtcblxufVxuXG4vKmVzbGludCBuby11bnVzZWQtdmFyczogWzEsIHsgXCJ2YXJzSWdub3JlUGF0dGVyblwiOiBcInJlc2V0Q2hhbGxlbmdlfG5leHRDaGFsbGVuZ2V8YWR2YW5jZVRyaWFsXCIgfV0qL1xuY29uc3QgcmVzZXRDaGFsbGVuZ2UgPSBmdW5jdGlvbiByZXNldENoYWxsZW5nZSgpIHtcbiAgdHJpYWxJbmRleCA9IDE7XG4gIG1vdmVDb3VudCA9IDA7XG4gIHJlc2V0RHJha2VzKCk7XG59O1xuXG5jb25zdCBuZXh0Q2hhbGxlbmdlID0gZnVuY3Rpb24gbmV4dENoYWxsZW5nZSgpIHtcbiAgbGV0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgbmV4dFVybDtcbiAgaWYgKGNoYWxsZW5nZSA8IDIpIHtcbiAgICBuZXh0VXJsID0gdXJsLnJlcGxhY2UoYGNoYWxsZW5nZT0ke2NoYWxsZW5nZX1gLCBgY2hhbGxlbmdlPSR7Y2hhbGxlbmdlKzF9YCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgY29uc3QgY2FzZTFJbmRleCA9IHVybC5pbmRleE9mKCdjYXNlLTEnKTtcbiAgICBuZXh0VXJsID0gdXJsLnN1YnN0cigwLCBjYXNlMUluZGV4KTtcbiAgfVxuICB3aW5kb3cubG9jYXRpb24uYXNzaWduKG5leHRVcmwpO1xufTtcblxuY29uc3QgYWR2YW5jZVRyaWFsID0gZnVuY3Rpb24gYWR2YW5jZVRyaWFsKCkge1xuICBpZiAoY2hhbGxlbmdlID49IDIpIHtcbiAgICBpZiAodHJpYWxJbmRleCA+PSB0cmlhbENvdW50KSB7XG4gICAgICBzaG93QWxlcnQodHJ1ZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiQ29uZ3JhdHVsYXRpb25zIVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTE6IFwiWW91J3ZlIGNvbXBsZXRlZCBhbGwgdGhlIHRyaWFscyBpbiB0aGlzIGNoYWxsZW5nZS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9rQnV0dG9uOiBcIkdvIGJhY2sgdG8gdGhlIENhc2UgTG9nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBva0NhbGxiYWNrOiBcIm5leHRDaGFsbGVuZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeUJ1dHRvbjogXCJUcnkgQWdhaW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeUNhbGxiYWNrOiBcInJlc2V0Q2hhbGxlbmdlXCJcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgKyt0cmlhbEluZGV4O1xuICB9XG4gIG1vdmVDb3VudCA9IDA7XG4gIHJlc2V0RHJha2VzKCk7XG59O1xuXG5mdW5jdGlvbiBzaG93QWxlcnQoaVNob3csIGlPcHRpb25zKSB7XG4gIGNvbnN0IGRpc3BsYXlNb2RlID0gaVNob3cgPyAnYmxvY2snIDogJ25vbmUnO1xuICBpZiAoaVNob3cpIHtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFsZXJ0LXRpdGxlXCIpLmlubmVySFRNTCA9IGlPcHRpb25zLnRpdGxlIHx8IFwiXCI7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbGVydC1tZXNzYWdlMVwiKS5pbm5lckhUTUwgPSBpT3B0aW9ucy5tZXNzYWdlMSB8fCBcIlwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWxlcnQtbWVzc2FnZTJcIikuaW5uZXJIVE1MID0gaU9wdGlvbnMubWVzc2FnZTIgfHwgXCJcIjtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFsZXJ0LW9rLWJ1dHRvblwiKS5pbm5lckhUTUwgPSBpT3B0aW9ucy5va0J1dHRvbiB8fCBcIlwiO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWxlcnQtb2stYnV0dG9uXCIpLnN0eWxlLmRpc3BsYXkgPSBpT3B0aW9ucy5va0J1dHRvbiA/ICdibG9jaycgOiAnbm9uZSc7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbGVydC1vay1idXR0b25cIikuZGF0YXNldC5va0NhbGxiYWNrID0gaU9wdGlvbnMub2tDYWxsYmFjayB8fCAnJztcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFsZXJ0LXRyeS1idXR0b25cIikuaW5uZXJIVE1MID0gaU9wdGlvbnMudHJ5QnV0dG9uIHx8IFwiXCI7XG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbGVydC10cnktYnV0dG9uXCIpLnN0eWxlLmRpc3BsYXkgPSBpT3B0aW9ucy50cnlCdXR0b24gPyAnYmxvY2snIDogJ25vbmUnO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWxlcnQtdHJ5LWJ1dHRvblwiKS5kYXRhc2V0LnRyeUNhbGxiYWNrID0gaU9wdGlvbnMudHJ5Q2FsbGJhY2sgfHwgJyc7XG4gIH1cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvdmVybGF5XCIpLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5TW9kZTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhbGVydC13cmFwcGVyXCIpLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5TW9kZTtcbn1cblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXN0LWRyYWtlLWJ1dHRvblwiKS5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIC8vIENoZWNraW5nIHRoZSBhbnN3ZXIgY291bnRzIGFzIGEgbW92ZVxuICArK21vdmVDb3VudDtcbiAgc2hvd0RyYWtlRm9yQ29uZmlybWF0aW9uID0gdHJ1ZTtcbiAgcmVuZGVyKCk7XG5cbiAgaWYgKDAgPT09IEdlbmlCbG9ja3MuR2VuZXRpY3NVdGlscy5udW1iZXJPZkNoYW5nZXNUb1JlYWNoUGhlbm90eXBlKHlvdXJEcmFrZSwgdGFyZ2V0RHJha2UpKSB7XG4gICAgaWYgKGNoYWxsZW5nZSA8PSAxKSB7XG4gICAgICBzaG93QWxlcnQodHJ1ZSwgeyBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIkdvb2Qgd29yayFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UxOiBcIlRoZSBkcmFrZSB5b3UgaGF2ZSBjcmVhdGVkIG1hdGNoZXMgdGhlIHRhcmdldCBkcmFrZS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9rQnV0dG9uOiBcIk5leHQgQ2hhbGxlbmdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBva0NhbGxiYWNrOiBcIm5leHRDaGFsbGVuZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeUJ1dHRvbjogXCJUcnkgQWdhaW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeUNhbGxiYWNrOiBcInJlc2V0Q2hhbGxlbmdlXCJcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzaG93QWxlcnQodHJ1ZSwgeyBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIkdvb2Qgd29yayFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UxOiBcIlRoZSBkcmFrZSB5b3UgaGF2ZSBjcmVhdGVkIG1hdGNoZXMgdGhlIHRhcmdldCBkcmFrZS5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9rQnV0dG9uOiBcIk9LXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBva0NhbGxiYWNrOiBcImFkdmFuY2VUcmlhbFwiXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIHNob3dBbGVydCh0cnVlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiVGhhdCdzIG5vdCB0aGUgZHJha2UhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTE6IFwiVGhlIGRyYWtlIHlvdSBoYXZlIGNyZWF0ZWQgZG9lc24ndCBtYXRjaCB0aGUgdGFyZ2V0IGRyYWtlLlxcblBsZWFzZSB0cnkgYWdhaW4uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgdHJ5QnV0dG9uOiBcIlRyeSBBZ2FpblwiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgIHJlbmRlcigpO1xuICB9XG59O1xuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFsZXJ0LW9rLWJ1dHRvblwiKS5vbmNsaWNrID0gZnVuY3Rpb24oZXZ0KSB7XG4gIHNob3dBbGVydChmYWxzZSk7XG4gIHNob3dEcmFrZUZvckNvbmZpcm1hdGlvbiA9IGZhbHNlO1xuICBpZiAoZXZ0LnRhcmdldC5kYXRhc2V0Lm9rQ2FsbGJhY2sgJiYgd2luZG93W2V2dC50YXJnZXQuZGF0YXNldC5va0NhbGxiYWNrXSlcbiAgICB3aW5kb3dbZXZ0LnRhcmdldC5kYXRhc2V0Lm9rQ2FsbGJhY2tdLmNhbGwoKTtcbiAgcmVuZGVyKCk7XG59O1xuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFsZXJ0LXRyeS1idXR0b25cIikub25jbGljayA9IGZ1bmN0aW9uKGV2dCkge1xuICBzaG93QWxlcnQoZmFsc2UpO1xuICBzaG93RHJha2VGb3JDb25maXJtYXRpb24gPSBmYWxzZTtcbiAgaWYgKGV2dC50YXJnZXQuZGF0YXNldC50cnlDYWxsYmFjayAmJiB3aW5kb3dbZXZ0LnRhcmdldC5kYXRhc2V0LnRyeUNhbGxiYWNrXSlcbiAgICB3aW5kb3dbZXZ0LnRhcmdldC5kYXRhc2V0LnRyeUNhbGxiYWNrXS5jYWxsKCk7XG4gIHJlbmRlcigpO1xufTtcblxucmVzZXREcmFrZXMoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
