'use strict';

/* global ReactRedux, Redux */

var initialState = {
  dragon: {
    alleles: "a:T,b:t,a:m,b:M,a:w,b:W,a:h,b:h,a:C,b:C,a:B,b:B,a:Fl,b:Fl,a:Hl,b:hl,a:a,b:a,a:D,b:D,a:Bog,b:Bog,a:rh,b:rh",
    sex: 1
  }
};

var rootReducer = function rootReducer(state, action) {
  if (!state) state = initialState;
  switch (action.type) {
    case 'ALLELES_CHANGED':
      return {
        dragon: {
          alleles: action.alleles,
          sex: state.dragon.sex
        }
      };
    case 'SET_STATE':
      return action.state;
    default:
      return state;
  }
};

var hiztory = [];
var hiztoryPosition = 0;
var undoing = false;

var ACTIONS = {
  changedAllele: function changedAllele(newAlleles) {
    return {
      type: "ALLELES_CHANGED",
      alleles: newAlleles,
      description: "User changed dragon allele"
    };
  },
  undo: function undo() {
    hiztoryPosition--;
    return {
      type: "SET_STATE",
      state: hiztory[hiztoryPosition]
    };
  },
  redo: function redo() {
    hiztoryPosition++;
    return {
      type: "SET_STATE",
      state: hiztory[hiztoryPosition]
    };
  }
};

var log = function log(action) {
  console.log("==== ACTION ====");
  console.log("  " + action.description);
  delete action.description;
  console.log("  " + JSON.stringify(action));
};

var createAction = function createAction(actionKey, props) {
  var action = ACTIONS[actionKey](props);
  log(action);
  return action;
};

var store = Redux.createStore(rootReducer, initialState);

var APP = function APP(props) {
  var dragon = props.dragon,
      org = new BioLogica.Organism(BioLogica.Species.Drake, dragon.alleles, dragon.sex);
  return React.createElement('div', {}, React.createElement(GeniBlocks.OrganismView, { org: org }), React.createElement(GeniBlocks.GenomeView, {
    org: org,
    onAlleleChange: function onAlleleChange(chrom, side, prevAllele, newAllele) {
      org.genetics.genotype.replaceAlleleChromName(chrom, side, prevAllele, newAllele);
      props.dispatch(createAction("changedAllele", org.getAlleleString()));
    }
  }));
};

APP.propTypes = {
  dragon: React.PropTypes.object,
  dispatch: React.PropTypes.func
};

function select(state) {
  return state;
}

ReactDOM.render(React.createElement(ReactRedux.Provider, { store: store }, React.createElement(ReactRedux.connect(select)(APP), null)), document.getElementById('app'));

hiztory.push(store.getState());
store.subscribe(function () {
  if (!undoing) {
    hiztory.push(store.getState());
    hiztoryPosition++;
  }
});

document.getElementById("undo").onclick = function () {
  undoing = true;
  store.dispatch(ACTIONS.undo());
  undoing = false;
};
document.getElementById("redo").onclick = function () {
  undoing = true;
  store.dispatch(ACTIONS.redo());
  undoing = false;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHV4LWRlbW8vcmVkdXgtZGVtby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsSUFBSSxlQUFlO0FBQ2pCLFVBQVE7QUFDTixhQUFTLDJHQUFUO0FBQ0EsU0FBSyxDQUFMO0dBRkY7Q0FERTs7QUFPSixJQUFJLGNBQWMsU0FBZCxXQUFjLENBQVMsS0FBVCxFQUFnQixNQUFoQixFQUF3QjtBQUN4QyxNQUFJLENBQUMsS0FBRCxFQUFRLFFBQVEsWUFBUixDQUFaO0FBQ0EsVUFBUSxPQUFPLElBQVA7QUFDUixTQUFLLGlCQUFMO0FBQ0UsYUFBTztBQUNMLGdCQUFRO0FBQ04sbUJBQVMsT0FBTyxPQUFQO0FBQ1QsZUFBSyxNQUFNLE1BQU4sQ0FBYSxHQUFiO1NBRlA7T0FERixDQURGO0FBREEsU0FRSyxXQUFMO0FBQ0UsYUFBTyxPQUFPLEtBQVAsQ0FEVDtBQVJBO0FBV0UsYUFBTyxLQUFQLENBREY7QUFWQSxHQUZ3QztDQUF4Qjs7QUFpQmxCLElBQUksVUFBVSxFQUFWO0FBQ0osSUFBSSxrQkFBa0IsQ0FBbEI7QUFDSixJQUFJLFVBQVUsS0FBVjs7QUFFSixJQUFJLFVBQVU7QUFDWixpQkFBZSx1QkFBUyxVQUFULEVBQXFCO0FBQ2xDLFdBQU87QUFDTCxZQUFNLGlCQUFOO0FBQ0EsZUFBUyxVQUFUO0FBQ0EsbUJBQWEsNEJBQWI7S0FIRixDQURrQztHQUFyQjtBQU9mLFFBQU0sZ0JBQVc7QUFDZixzQkFEZTtBQUVmLFdBQU87QUFDTCxZQUFNLFdBQU47QUFDQSxhQUFPLFFBQVEsZUFBUixDQUFQO0tBRkYsQ0FGZTtHQUFYO0FBT04sUUFBTSxnQkFBVztBQUNmLHNCQURlO0FBRWYsV0FBTztBQUNMLFlBQU0sV0FBTjtBQUNBLGFBQU8sUUFBUSxlQUFSLENBQVA7S0FGRixDQUZlO0dBQVg7Q0FmSjs7QUF3QkosSUFBSSxNQUFNLFNBQU4sR0FBTSxDQUFTLE1BQVQsRUFBaUI7QUFDekIsVUFBUSxHQUFSLENBQVksa0JBQVosRUFEeUI7QUFFekIsVUFBUSxHQUFSLENBQVksT0FBTyxPQUFPLFdBQVAsQ0FBbkIsQ0FGeUI7QUFHekIsU0FBTyxPQUFPLFdBQVAsQ0FIa0I7QUFJekIsVUFBUSxHQUFSLENBQVksT0FBTyxLQUFLLFNBQUwsQ0FBZSxNQUFmLENBQVAsQ0FBWixDQUp5QjtDQUFqQjs7QUFPVixJQUFJLGVBQWUsU0FBZixZQUFlLENBQVMsU0FBVCxFQUFvQixLQUFwQixFQUEyQjtBQUM1QyxNQUFJLFNBQVMsUUFBUSxTQUFSLEVBQW1CLEtBQW5CLENBQVQsQ0FEd0M7QUFFNUMsTUFBSSxNQUFKLEVBRjRDO0FBRzVDLFNBQU8sTUFBUCxDQUg0QztDQUEzQjs7QUFNbkIsSUFBSSxRQUFRLE1BQU0sV0FBTixDQUFrQixXQUFsQixFQUErQixZQUEvQixDQUFSOztBQUVKLElBQUksTUFBTSxTQUFOLEdBQU0sQ0FBUyxLQUFULEVBQWdCO0FBQ3hCLE1BQUksU0FBUyxNQUFNLE1BQU47TUFDVCxNQUFNLElBQUksVUFBVSxRQUFWLENBQW1CLFVBQVUsT0FBVixDQUFrQixLQUFsQixFQUF5QixPQUFPLE9BQVAsRUFBZ0IsT0FBTyxHQUFQLENBQXRFLENBRm9CO0FBR3hCLFNBQU8sTUFBTSxhQUFOLENBQ0wsS0FESyxFQUVMLEVBRkssRUFHTCxNQUFNLGFBQU4sQ0FDRSxXQUFXLFlBQVgsRUFDQSxFQUFDLEtBQUssR0FBTCxFQUZILENBSEssRUFPTCxNQUFNLGFBQU4sQ0FDRSxXQUFXLFVBQVgsRUFDQTtBQUNFLFNBQUssR0FBTDtBQUNBLG9CQUFnQix3QkFBUyxLQUFULEVBQWdCLElBQWhCLEVBQXNCLFVBQXRCLEVBQWtDLFNBQWxDLEVBQTZDO0FBQzNELFVBQUksUUFBSixDQUFhLFFBQWIsQ0FBc0Isc0JBQXRCLENBQTZDLEtBQTdDLEVBQW9ELElBQXBELEVBQTBELFVBQTFELEVBQXNFLFNBQXRFLEVBRDJEO0FBRTNELFlBQU0sUUFBTixDQUFlLGFBQWEsZUFBYixFQUE4QixJQUFJLGVBQUosRUFBOUIsQ0FBZixFQUYyRDtLQUE3QztHQUpwQixDQVBLLENBQVAsQ0FId0I7Q0FBaEI7O0FBdUJWLElBQUksU0FBSixHQUFnQjtBQUNkLFVBQVEsTUFBTSxTQUFOLENBQWdCLE1BQWhCO0FBQ1IsWUFBVSxNQUFNLFNBQU4sQ0FBZ0IsSUFBaEI7Q0FGWjs7QUFLQSxTQUFTLE1BQVQsQ0FBZ0IsS0FBaEIsRUFBdUI7QUFDckIsU0FBTyxLQUFQLENBRHFCO0NBQXZCOztBQUlBLFNBQVMsTUFBVCxDQUNFLE1BQU0sYUFBTixDQUNFLFdBQVcsUUFBWCxFQUNBLEVBQUMsT0FBTyxLQUFQLEVBRkgsRUFHRSxNQUFNLGFBQU4sQ0FBb0IsV0FBVyxPQUFYLENBQW1CLE1BQW5CLEVBQTJCLEdBQTNCLENBQXBCLEVBQXFELElBQXJELENBSEYsQ0FERixFQU1FLFNBQVMsY0FBVCxDQUF3QixLQUF4QixDQU5GOztBQVNBLFFBQVEsSUFBUixDQUFhLE1BQU0sUUFBTixFQUFiO0FBQ0EsTUFBTSxTQUFOLENBQWdCLFlBQVc7QUFDekIsTUFBSSxDQUFDLE9BQUQsRUFBVTtBQUNaLFlBQVEsSUFBUixDQUFhLE1BQU0sUUFBTixFQUFiLEVBRFk7QUFFWixzQkFGWTtHQUFkO0NBRGMsQ0FBaEI7O0FBT0EsU0FBUyxjQUFULENBQXdCLE1BQXhCLEVBQWdDLE9BQWhDLEdBQTBDLFlBQVc7QUFDbkQsWUFBVSxJQUFWLENBRG1EO0FBRW5ELFFBQU0sUUFBTixDQUFlLFFBQVEsSUFBUixFQUFmLEVBRm1EO0FBR25ELFlBQVUsS0FBVixDQUhtRDtDQUFYO0FBSzFDLFNBQVMsY0FBVCxDQUF3QixNQUF4QixFQUFnQyxPQUFoQyxHQUEwQyxZQUFXO0FBQ25ELFlBQVUsSUFBVixDQURtRDtBQUVuRCxRQUFNLFFBQU4sQ0FBZSxRQUFRLElBQVIsRUFBZixFQUZtRDtBQUduRCxZQUFVLEtBQVYsQ0FIbUQ7Q0FBWCIsImZpbGUiOiJyZWR1eC1kZW1vL3JlZHV4LWRlbW8uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBnbG9iYWwgUmVhY3RSZWR1eCwgUmVkdXggKi9cblxudmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgZHJhZ29uOiB7XG4gICAgYWxsZWxlczogXCJhOlQsYjp0LGE6bSxiOk0sYTp3LGI6VyxhOmgsYjpoLGE6QyxiOkMsYTpCLGI6QixhOkZsLGI6RmwsYTpIbCxiOmhsLGE6YSxiOmEsYTpELGI6RCxhOkJvZyxiOkJvZyxhOnJoLGI6cmhcIixcbiAgICBzZXg6IDFcbiAgfVxufTtcblxudmFyIHJvb3RSZWR1Y2VyID0gZnVuY3Rpb24oc3RhdGUsIGFjdGlvbikge1xuICBpZiAoIXN0YXRlKSBzdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICBjYXNlICdBTExFTEVTX0NIQU5HRUQnOlxuICAgIHJldHVybiB7XG4gICAgICBkcmFnb246IHtcbiAgICAgICAgYWxsZWxlczogYWN0aW9uLmFsbGVsZXMsXG4gICAgICAgIHNleDogc3RhdGUuZHJhZ29uLnNleFxuICAgICAgfVxuICAgIH07XG4gIGNhc2UgJ1NFVF9TVEFURSc6XG4gICAgcmV0dXJuIGFjdGlvbi5zdGF0ZTtcbiAgZGVmYXVsdDpcbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn07XG5cbnZhciBoaXp0b3J5ID0gW107XG52YXIgaGl6dG9yeVBvc2l0aW9uID0gMDtcbnZhciB1bmRvaW5nID0gZmFsc2U7XG5cbnZhciBBQ1RJT05TID0ge1xuICBjaGFuZ2VkQWxsZWxlOiBmdW5jdGlvbihuZXdBbGxlbGVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiQUxMRUxFU19DSEFOR0VEXCIsXG4gICAgICBhbGxlbGVzOiBuZXdBbGxlbGVzLFxuICAgICAgZGVzY3JpcHRpb246IFwiVXNlciBjaGFuZ2VkIGRyYWdvbiBhbGxlbGVcIlxuICAgIH07XG4gIH0sXG4gIHVuZG86IGZ1bmN0aW9uKCkge1xuICAgIGhpenRvcnlQb3NpdGlvbi0tO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlNFVF9TVEFURVwiLFxuICAgICAgc3RhdGU6IGhpenRvcnlbaGl6dG9yeVBvc2l0aW9uXVxuICAgIH07XG4gIH0sXG4gIHJlZG86IGZ1bmN0aW9uKCkge1xuICAgIGhpenRvcnlQb3NpdGlvbisrO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIlNFVF9TVEFURVwiLFxuICAgICAgc3RhdGU6IGhpenRvcnlbaGl6dG9yeVBvc2l0aW9uXVxuICAgIH07XG4gIH1cbn07XG5cbnZhciBsb2cgPSBmdW5jdGlvbihhY3Rpb24pIHtcbiAgY29uc29sZS5sb2coXCI9PT09IEFDVElPTiA9PT09XCIpO1xuICBjb25zb2xlLmxvZyhcIiAgXCIgKyBhY3Rpb24uZGVzY3JpcHRpb24pO1xuICBkZWxldGUgYWN0aW9uLmRlc2NyaXB0aW9uO1xuICBjb25zb2xlLmxvZyhcIiAgXCIgKyBKU09OLnN0cmluZ2lmeShhY3Rpb24pKTtcbn07XG5cbnZhciBjcmVhdGVBY3Rpb24gPSBmdW5jdGlvbihhY3Rpb25LZXksIHByb3BzKSB7XG4gIHZhciBhY3Rpb24gPSBBQ1RJT05TW2FjdGlvbktleV0ocHJvcHMpO1xuICBsb2coYWN0aW9uKTtcbiAgcmV0dXJuIGFjdGlvbjtcbn07XG5cbnZhciBzdG9yZSA9IFJlZHV4LmNyZWF0ZVN0b3JlKHJvb3RSZWR1Y2VyLCBpbml0aWFsU3RhdGUpO1xuXG52YXIgQVBQID0gZnVuY3Rpb24ocHJvcHMpIHtcbiAgdmFyIGRyYWdvbiA9IHByb3BzLmRyYWdvbixcbiAgICAgIG9yZyA9IG5ldyBCaW9Mb2dpY2EuT3JnYW5pc20oQmlvTG9naWNhLlNwZWNpZXMuRHJha2UsIGRyYWdvbi5hbGxlbGVzLCBkcmFnb24uc2V4KTtcbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgJ2RpdicsXG4gICAge30sXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIEdlbmlCbG9ja3MuT3JnYW5pc21WaWV3LFxuICAgICAge29yZzogb3JnfVxuICAgICksXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIEdlbmlCbG9ja3MuR2Vub21lVmlldyxcbiAgICAgIHtcbiAgICAgICAgb3JnOiBvcmcsXG4gICAgICAgIG9uQWxsZWxlQ2hhbmdlOiBmdW5jdGlvbihjaHJvbSwgc2lkZSwgcHJldkFsbGVsZSwgbmV3QWxsZWxlKSB7XG4gICAgICAgICAgb3JnLmdlbmV0aWNzLmdlbm90eXBlLnJlcGxhY2VBbGxlbGVDaHJvbU5hbWUoY2hyb20sIHNpZGUsIHByZXZBbGxlbGUsIG5ld0FsbGVsZSk7XG4gICAgICAgICAgcHJvcHMuZGlzcGF0Y2goY3JlYXRlQWN0aW9uKFwiY2hhbmdlZEFsbGVsZVwiLCBvcmcuZ2V0QWxsZWxlU3RyaW5nKCkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIClcbiAgKTtcbn07XG5cbkFQUC5wcm9wVHlwZXMgPSB7XG4gIGRyYWdvbjogUmVhY3QuUHJvcFR5cGVzLm9iamVjdCxcbiAgZGlzcGF0Y2g6IFJlYWN0LlByb3BUeXBlcy5mdW5jXG59O1xuXG5mdW5jdGlvbiBzZWxlY3Qoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5SZWFjdERPTS5yZW5kZXIoXG4gIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgUmVhY3RSZWR1eC5Qcm92aWRlcixcbiAgICB7c3RvcmU6IHN0b3JlfSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0UmVkdXguY29ubmVjdChzZWxlY3QpKEFQUCksIG51bGwpXG4gICksXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKVxuKTtcblxuaGl6dG9yeS5wdXNoKHN0b3JlLmdldFN0YXRlKCkpO1xuc3RvcmUuc3Vic2NyaWJlKGZ1bmN0aW9uKCkge1xuICBpZiAoIXVuZG9pbmcpIHtcbiAgICBoaXp0b3J5LnB1c2goc3RvcmUuZ2V0U3RhdGUoKSk7XG4gICAgaGl6dG9yeVBvc2l0aW9uKys7XG4gIH1cbn0pO1xuXG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVuZG9cIikub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICB1bmRvaW5nID0gdHJ1ZTtcbiAgc3RvcmUuZGlzcGF0Y2goQUNUSU9OUy51bmRvKCkpO1xuICB1bmRvaW5nID0gZmFsc2U7XG59O1xuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZWRvXCIpLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgdW5kb2luZyA9IHRydWU7XG4gIHN0b3JlLmRpc3BhdGNoKEFDVElPTlMucmVkbygpKTtcbiAgdW5kb2luZyA9IGZhbHNlO1xufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
