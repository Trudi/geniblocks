'use strict';

/* global ReactRedux, Redux */

var initialState = {
  dragon: {
    alleles: "a:T,b:t,a:m,b:M,a:w,b:W,a:h,b:h,a:C,b:C,a:B,b:B,a:Fl,b:Fl,a:Hl,b:hl,a:a,b:a,a:D,b:D,a:Bog,b:Bog,a:rh,b:rh",
    sex: 1
  }
};

var rootReducer = function rootReducer(state, action) {
  if (!state) state = initialState;
  switch (action.type) {
    case 'ALLELES_CHANGED':
      return {
        dragon: {
          alleles: action.alleles,
          sex: state.dragon.sex
        }
      };
    case 'SET_STATE':
      return action.state;
    default:
      return state;
  }
};

var hiztory = [];
var hiztoryPosition = 0;
var undoing = false;

var ACTIONS = {
  changedAllele: function changedAllele(newAlleles) {
    return {
      type: "ALLELES_CHANGED",
      alleles: newAlleles,
      description: "User changed dragon allele"
    };
  },
  undo: function undo() {
    hiztoryPosition--;
    return {
      type: "SET_STATE",
      state: hiztory[hiztoryPosition]
    };
  },
  redo: function redo() {
    hiztoryPosition++;
    return {
      type: "SET_STATE",
      state: hiztory[hiztoryPosition]
    };
  }
};

var log = function log(action) {
  console.log("==== ACTION ====");
  console.log("  " + action.description);
  delete action.description;
  console.log("  " + JSON.stringify(action));
};

var createAction = function createAction(actionKey, props) {
  var action = ACTIONS[actionKey](props);
  log(action);
  return action;
};

var store = Redux.createStore(rootReducer, initialState);

var APP = function APP(props) {
  var dragon = props.dragon,
      org = new BioLogica.Organism(BioLogica.Species.Drake, dragon.alleles, dragon.sex);
  return React.createElement('div', {}, React.createElement(GeniBlocks.OrganismView, { org: org }), React.createElement(GeniBlocks.GenomeView, {
    org: org,
    onAlleleChange: function onAlleleChange(chrom, side, prevAllele, newAllele) {
      org.genetics.genotype.replaceAlleleChromName(chrom, side, prevAllele, newAllele);
      props.dispatch(createAction("changedAllele", org.getAlleleString()));
    }
  }));
};

APP.propTypes = {
  dragon: React.PropTypes.object,
  dispatch: React.PropTypes.func
};

function select(state) {
  return state;
}

ReactDOM.render(React.createElement(ReactRedux.Provider, { store: store }, React.createElement(ReactRedux.connect(select)(APP), null)), document.getElementById('app'));

hiztory.push(store.getState());
store.subscribe(function () {
  if (!undoing) {
    hiztory.push(store.getState());
    hiztoryPosition++;
  }
});

document.getElementById("undo").onclick = function () {
  undoing = true;
  store.dispatch(ACTIONS.undo());
  undoing = false;
};
document.getElementById("redo").onclick = function () {
  undoing = true;
  store.dispatch(ACTIONS.redo());
  undoing = false;
};
//# sourceMappingURL=data:application/json;base64,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O0FBRlosQ0FBaEI7O0FBS0EsU0FBUyxNQUFULENBQWdCLEtBQWhCLEVBQXVCO0FBQ3JCLFNBQU8sS0FBUDtBQUNEOztBQUVELFNBQVMsTUFBVCxDQUNFLE1BQU0sYUFBTixDQUNFLFdBQVcsUUFEYixFQUVFLEVBQUMsT0FBTyxLQUFSLEVBRkYsRUFHRSxNQUFNLGFBQU4sQ0FBb0IsV0FBVyxPQUFYLENBQW1CLE1BQW5CLEVBQTJCLEdBQTNCLENBQXBCLEVBQXFELElBQXJELENBSEYsQ0FERixFQU1FLFNBQVMsY0FBVCxDQUF3QixLQUF4QixDQU5GOztBQVNBLFFBQVEsSUFBUixDQUFhLE1BQU0sUUFBTixFQUFiO0FBQ0EsTUFBTSxTQUFOLENBQWdCLFlBQVc7QUFDekIsTUFBSSxDQUFDLE9BQUwsRUFBYztBQUNaLFlBQVEsSUFBUixDQUFhLE1BQU0sUUFBTixFQUFiO0FBQ0E7QUFDRDtBQUNGLENBTEQ7O0FBT0EsU0FBUyxjQUFULENBQXdCLE1BQXhCLEVBQWdDLE9BQWhDLEdBQTBDLFlBQVc7QUFDbkQsWUFBVSxJQUFWO0FBQ0EsUUFBTSxRQUFOLENBQWUsUUFBUSxJQUFSLEVBQWY7QUFDQSxZQUFVLEtBQVY7QUFDRCxDQUpEO0FBS0EsU0FBUyxjQUFULENBQXdCLE1BQXhCLEVBQWdDLE9BQWhDLEdBQTBDLFlBQVc7QUFDbkQsWUFBVSxJQUFWO0FBQ0EsUUFBTSxRQUFOLENBQWUsUUFBUSxJQUFSLEVBQWY7QUFDQSxZQUFVLEtBQVY7QUFDRCxDQUpEIiwiZmlsZSI6InJlZHV4LWRlbW8vcmVkdXgtZGVtby5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBSZWFjdFJlZHV4LCBSZWR1eCAqL1xuXG52YXIgaW5pdGlhbFN0YXRlID0ge1xuICBkcmFnb246IHtcbiAgICBhbGxlbGVzOiBcImE6VCxiOnQsYTptLGI6TSxhOncsYjpXLGE6aCxiOmgsYTpDLGI6QyxhOkIsYjpCLGE6RmwsYjpGbCxhOkhsLGI6aGwsYTphLGI6YSxhOkQsYjpELGE6Qm9nLGI6Qm9nLGE6cmgsYjpyaFwiLFxuICAgIHNleDogMVxuICB9XG59O1xuXG52YXIgcm9vdFJlZHVjZXIgPSBmdW5jdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gIGlmICghc3RhdGUpIHN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gIGNhc2UgJ0FMTEVMRVNfQ0hBTkdFRCc6XG4gICAgcmV0dXJuIHtcbiAgICAgIGRyYWdvbjoge1xuICAgICAgICBhbGxlbGVzOiBhY3Rpb24uYWxsZWxlcyxcbiAgICAgICAgc2V4OiBzdGF0ZS5kcmFnb24uc2V4XG4gICAgICB9XG4gICAgfTtcbiAgY2FzZSAnU0VUX1NUQVRFJzpcbiAgICByZXR1cm4gYWN0aW9uLnN0YXRlO1xuICBkZWZhdWx0OlxuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcblxudmFyIGhpenRvcnkgPSBbXTtcbnZhciBoaXp0b3J5UG9zaXRpb24gPSAwO1xudmFyIHVuZG9pbmcgPSBmYWxzZTtcblxudmFyIEFDVElPTlMgPSB7XG4gIGNoYW5nZWRBbGxlbGU6IGZ1bmN0aW9uKG5ld0FsbGVsZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJBTExFTEVTX0NIQU5HRURcIixcbiAgICAgIGFsbGVsZXM6IG5ld0FsbGVsZXMsXG4gICAgICBkZXNjcmlwdGlvbjogXCJVc2VyIGNoYW5nZWQgZHJhZ29uIGFsbGVsZVwiXG4gICAgfTtcbiAgfSxcbiAgdW5kbzogZnVuY3Rpb24oKSB7XG4gICAgaGl6dG9yeVBvc2l0aW9uLS07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiU0VUX1NUQVRFXCIsXG4gICAgICBzdGF0ZTogaGl6dG9yeVtoaXp0b3J5UG9zaXRpb25dXG4gICAgfTtcbiAgfSxcbiAgcmVkbzogZnVuY3Rpb24oKSB7XG4gICAgaGl6dG9yeVBvc2l0aW9uKys7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiU0VUX1NUQVRFXCIsXG4gICAgICBzdGF0ZTogaGl6dG9yeVtoaXp0b3J5UG9zaXRpb25dXG4gICAgfTtcbiAgfVxufTtcblxudmFyIGxvZyA9IGZ1bmN0aW9uKGFjdGlvbikge1xuICBjb25zb2xlLmxvZyhcIj09PT0gQUNUSU9OID09PT1cIik7XG4gIGNvbnNvbGUubG9nKFwiICBcIiArIGFjdGlvbi5kZXNjcmlwdGlvbik7XG4gIGRlbGV0ZSBhY3Rpb24uZGVzY3JpcHRpb247XG4gIGNvbnNvbGUubG9nKFwiICBcIiArIEpTT04uc3RyaW5naWZ5KGFjdGlvbikpO1xufTtcblxudmFyIGNyZWF0ZUFjdGlvbiA9IGZ1bmN0aW9uKGFjdGlvbktleSwgcHJvcHMpIHtcbiAgdmFyIGFjdGlvbiA9IEFDVElPTlNbYWN0aW9uS2V5XShwcm9wcyk7XG4gIGxvZyhhY3Rpb24pO1xuICByZXR1cm4gYWN0aW9uO1xufTtcblxudmFyIHN0b3JlID0gUmVkdXguY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIGluaXRpYWxTdGF0ZSk7XG5cbnZhciBBUFAgPSBmdW5jdGlvbihwcm9wcykge1xuICB2YXIgZHJhZ29uID0gcHJvcHMuZHJhZ29uLFxuICAgICAgb3JnID0gbmV3IEJpb0xvZ2ljYS5PcmdhbmlzbShCaW9Mb2dpY2EuU3BlY2llcy5EcmFrZSwgZHJhZ29uLmFsbGVsZXMsIGRyYWdvbi5zZXgpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7fSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgR2VuaUJsb2Nrcy5PcmdhbmlzbVZpZXcsXG4gICAgICB7b3JnOiBvcmd9XG4gICAgKSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgR2VuaUJsb2Nrcy5HZW5vbWVWaWV3LFxuICAgICAge1xuICAgICAgICBvcmc6IG9yZyxcbiAgICAgICAgb25BbGxlbGVDaGFuZ2U6IGZ1bmN0aW9uKGNocm9tLCBzaWRlLCBwcmV2QWxsZWxlLCBuZXdBbGxlbGUpIHtcbiAgICAgICAgICBvcmcuZ2VuZXRpY3MuZ2Vub3R5cGUucmVwbGFjZUFsbGVsZUNocm9tTmFtZShjaHJvbSwgc2lkZSwgcHJldkFsbGVsZSwgbmV3QWxsZWxlKTtcbiAgICAgICAgICBwcm9wcy5kaXNwYXRjaChjcmVhdGVBY3Rpb24oXCJjaGFuZ2VkQWxsZWxlXCIsIG9yZy5nZXRBbGxlbGVTdHJpbmcoKSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICApO1xufTtcblxuQVBQLnByb3BUeXBlcyA9IHtcbiAgZHJhZ29uOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxuICBkaXNwYXRjaDogUmVhY3QuUHJvcFR5cGVzLmZ1bmNcbn07XG5cbmZ1bmN0aW9uIHNlbGVjdChzdGF0ZSkge1xuICByZXR1cm4gc3RhdGU7XG59XG5cblJlYWN0RE9NLnJlbmRlcihcbiAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICBSZWFjdFJlZHV4LlByb3ZpZGVyLFxuICAgIHtzdG9yZTogc3RvcmV9LFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3RSZWR1eC5jb25uZWN0KHNlbGVjdCkoQVBQKSwgbnVsbClcbiAgKSxcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpXG4pO1xuXG5oaXp0b3J5LnB1c2goc3RvcmUuZ2V0U3RhdGUoKSk7XG5zdG9yZS5zdWJzY3JpYmUoZnVuY3Rpb24oKSB7XG4gIGlmICghdW5kb2luZykge1xuICAgIGhpenRvcnkucHVzaChzdG9yZS5nZXRTdGF0ZSgpKTtcbiAgICBoaXp0b3J5UG9zaXRpb24rKztcbiAgfVxufSk7XG5cbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidW5kb1wiKS5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIHVuZG9pbmcgPSB0cnVlO1xuICBzdG9yZS5kaXNwYXRjaChBQ1RJT05TLnVuZG8oKSk7XG4gIHVuZG9pbmcgPSBmYWxzZTtcbn07XG5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlZG9cIikub25jbGljayA9IGZ1bmN0aW9uKCkge1xuICB1bmRvaW5nID0gdHJ1ZTtcbiAgc3RvcmUuZGlzcGF0Y2goQUNUSU9OUy5yZWRvKCkpO1xuICB1bmRvaW5nID0gZmFsc2U7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
