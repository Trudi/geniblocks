'use strict';

/* global ReactRedux, Redux */

var initialState = {
  dragon: {
    alleles: "a:T,b:t,a:m,b:M,a:w,b:W,a:h,b:h,a:C,b:C,a:B,b:B,a:Fl,b:Fl,a:Hl,b:hl,a:a,b:a,a:D,b:D,a:Bog,b:Bog,a:rh,b:rh",
    sex: 1
  }
};

var rootReducer = function rootReducer(state, action) {
  if (!state) state = initialState;
  switch (action.type) {
    case 'ALLELES_CHANGED':
      return {
        dragon: {
          alleles: action.alleles,
          sex: state.dragon.sex
        }
      };
    case 'SET_STATE':
      return action.state;
    default:
      return state;
  }
};

var hiztory = [];
var hiztoryPosition = 0;
var undoing = false;

var ACTIONS = {
  changedAllele: function changedAllele(newAlleles) {
    return {
      type: "ALLELES_CHANGED",
      alleles: newAlleles,
      description: "User changed dragon allele"
    };
  },
  undo: function undo() {
    hiztoryPosition--;
    return {
      type: "SET_STATE",
      state: hiztory[hiztoryPosition]
    };
  },
  redo: function redo() {
    hiztoryPosition++;
    return {
      type: "SET_STATE",
      state: hiztory[hiztoryPosition]
    };
  }
};

var log = function log(action) {
  console.log("==== ACTION ====");
  console.log("  " + action.description);
  delete action.description;
  console.log("  " + JSON.stringify(action));
};

var createAction = function createAction(actionKey, props) {
  var action = ACTIONS[actionKey](props);
  log(action);
  return action;
};

var store = Redux.createStore(rootReducer, initialState);

var APP = function APP(props) {
  var dragon = props.dragon,
      org = new BioLogica.Organism(BioLogica.Species.Drake, dragon.alleles, dragon.sex);
  return React.createElement('div', {}, React.createElement(GeniBlocks.OrganismView, { org: org }), React.createElement(GeniBlocks.GenomeView, {
    org: org,
    alleleChanged: function alleleChanged(chrom, side, prevAllele, newAllele) {
      org.genetics.genotype.replaceAlleleChromName(chrom, side, prevAllele, newAllele);
      props.dispatch(createAction("changedAllele", org.getAlleleString()));
    }
  }));
};

APP.propTypes = {
  dragon: React.PropTypes.object,
  dispatch: React.PropTypes.func
};

function select(state) {
  return state;
}

ReactDOM.render(React.createElement(ReactRedux.Provider, { store: store }, React.createElement(ReactRedux.connect(select)(APP), null)), document.getElementById('app'));

hiztory.push(store.getState());
store.subscribe(function () {
  if (!undoing) {
    hiztory.push(store.getState());
    hiztoryPosition++;
  }
});

document.getElementById("undo").onclick = function () {
  undoing = true;
  store.dispatch(ACTIONS.undo());
  undoing = false;
};
document.getElementById("redo").onclick = function () {
  undoing = true;
  store.dispatch(ACTIONS.redo());
  undoing = false;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZHV4LWRlbW8vcmVkdXgtZGVtby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsSUFBSSxlQUFlO0FBQ2pCLFVBQVE7QUFDTixhQUFTLDJHQUFUO0FBQ0EsU0FBSyxDQUFMO0dBRkY7Q0FERTs7QUFPSixJQUFJLGNBQWMsU0FBZCxXQUFjLENBQVMsS0FBVCxFQUFnQixNQUFoQixFQUF3QjtBQUN4QyxNQUFJLENBQUMsS0FBRCxFQUFRLFFBQVEsWUFBUixDQUFaO0FBQ0EsVUFBUSxPQUFPLElBQVA7QUFDUixTQUFLLGlCQUFMO0FBQ0UsYUFBTztBQUNMLGdCQUFRO0FBQ04sbUJBQVMsT0FBTyxPQUFQO0FBQ1QsZUFBSyxNQUFNLE1BQU4sQ0FBYSxHQUFiO1NBRlA7T0FERixDQURGO0FBREEsU0FRSyxXQUFMO0FBQ0UsYUFBTyxPQUFPLEtBQVAsQ0FEVDtBQVJBO0FBV0UsYUFBTyxLQUFQLENBREY7QUFWQSxHQUZ3QztDQUF4Qjs7QUFpQmxCLElBQUksVUFBVSxFQUFWO0FBQ0osSUFBSSxrQkFBa0IsQ0FBbEI7QUFDSixJQUFJLFVBQVUsS0FBVjs7QUFFSixJQUFJLFVBQVU7QUFDWixpQkFBZSx1QkFBUyxVQUFULEVBQXFCO0FBQ2xDLFdBQU87QUFDTCxZQUFNLGlCQUFOO0FBQ0EsZUFBUyxVQUFUO0FBQ0EsbUJBQWEsNEJBQWI7S0FIRixDQURrQztHQUFyQjtBQU9mLFFBQU0sZ0JBQVc7QUFDZixzQkFEZTtBQUVmLFdBQU87QUFDTCxZQUFNLFdBQU47QUFDQSxhQUFPLFFBQVEsZUFBUixDQUFQO0tBRkYsQ0FGZTtHQUFYO0FBT04sUUFBTSxnQkFBVztBQUNmLHNCQURlO0FBRWYsV0FBTztBQUNMLFlBQU0sV0FBTjtBQUNBLGFBQU8sUUFBUSxlQUFSLENBQVA7S0FGRixDQUZlO0dBQVg7Q0FmSjs7QUF3QkosSUFBSSxNQUFNLFNBQU4sR0FBTSxDQUFTLE1BQVQsRUFBaUI7QUFDekIsVUFBUSxHQUFSLENBQVksa0JBQVosRUFEeUI7QUFFekIsVUFBUSxHQUFSLENBQVksT0FBTyxPQUFPLFdBQVAsQ0FBbkIsQ0FGeUI7QUFHekIsU0FBTyxPQUFPLFdBQVAsQ0FIa0I7QUFJekIsVUFBUSxHQUFSLENBQVksT0FBTyxLQUFLLFNBQUwsQ0FBZSxNQUFmLENBQVAsQ0FBWixDQUp5QjtDQUFqQjs7QUFPVixJQUFJLGVBQWUsU0FBZixZQUFlLENBQVMsU0FBVCxFQUFvQixLQUFwQixFQUEyQjtBQUM1QyxNQUFJLFNBQVMsUUFBUSxTQUFSLEVBQW1CLEtBQW5CLENBQVQsQ0FEd0M7QUFFNUMsTUFBSSxNQUFKLEVBRjRDO0FBRzVDLFNBQU8sTUFBUCxDQUg0QztDQUEzQjs7QUFNbkIsSUFBSSxRQUFRLE1BQU0sV0FBTixDQUFrQixXQUFsQixFQUErQixZQUEvQixDQUFSOztBQUVKLElBQUksTUFBTSxTQUFOLEdBQU0sQ0FBUyxLQUFULEVBQWdCO0FBQ3hCLE1BQUksU0FBUyxNQUFNLE1BQU47TUFDVCxNQUFNLElBQUksVUFBVSxRQUFWLENBQW1CLFVBQVUsT0FBVixDQUFrQixLQUFsQixFQUF5QixPQUFPLE9BQVAsRUFBZ0IsT0FBTyxHQUFQLENBQXRFLENBRm9CO0FBR3hCLFNBQU8sTUFBTSxhQUFOLENBQ0wsS0FESyxFQUVMLEVBRkssRUFHTCxNQUFNLGFBQU4sQ0FDRSxXQUFXLFlBQVgsRUFDQSxFQUFDLEtBQUssR0FBTCxFQUZILENBSEssRUFPTCxNQUFNLGFBQU4sQ0FDRSxXQUFXLFVBQVgsRUFDQTtBQUNFLFNBQUssR0FBTDtBQUNBLG1CQUFlLHVCQUFTLEtBQVQsRUFBZ0IsSUFBaEIsRUFBc0IsVUFBdEIsRUFBa0MsU0FBbEMsRUFBNkM7QUFDMUQsVUFBSSxRQUFKLENBQWEsUUFBYixDQUFzQixzQkFBdEIsQ0FBNkMsS0FBN0MsRUFBb0QsSUFBcEQsRUFBMEQsVUFBMUQsRUFBc0UsU0FBdEUsRUFEMEQ7QUFFMUQsWUFBTSxRQUFOLENBQWUsYUFBYSxlQUFiLEVBQThCLElBQUksZUFBSixFQUE5QixDQUFmLEVBRjBEO0tBQTdDO0dBSm5CLENBUEssQ0FBUCxDQUh3QjtDQUFoQjs7QUF1QlYsSUFBSSxTQUFKLEdBQWdCO0FBQ2QsVUFBUSxNQUFNLFNBQU4sQ0FBZ0IsTUFBaEI7QUFDUixZQUFVLE1BQU0sU0FBTixDQUFnQixJQUFoQjtDQUZaOztBQUtBLFNBQVMsTUFBVCxDQUFnQixLQUFoQixFQUF1QjtBQUNyQixTQUFPLEtBQVAsQ0FEcUI7Q0FBdkI7O0FBSUEsU0FBUyxNQUFULENBQ0UsTUFBTSxhQUFOLENBQ0UsV0FBVyxRQUFYLEVBQ0EsRUFBQyxPQUFPLEtBQVAsRUFGSCxFQUdFLE1BQU0sYUFBTixDQUFvQixXQUFXLE9BQVgsQ0FBbUIsTUFBbkIsRUFBMkIsR0FBM0IsQ0FBcEIsRUFBcUQsSUFBckQsQ0FIRixDQURGLEVBTUUsU0FBUyxjQUFULENBQXdCLEtBQXhCLENBTkY7O0FBU0EsUUFBUSxJQUFSLENBQWEsTUFBTSxRQUFOLEVBQWI7QUFDQSxNQUFNLFNBQU4sQ0FBZ0IsWUFBVztBQUN6QixNQUFJLENBQUMsT0FBRCxFQUFVO0FBQ1osWUFBUSxJQUFSLENBQWEsTUFBTSxRQUFOLEVBQWIsRUFEWTtBQUVaLHNCQUZZO0dBQWQ7Q0FEYyxDQUFoQjs7QUFPQSxTQUFTLGNBQVQsQ0FBd0IsTUFBeEIsRUFBZ0MsT0FBaEMsR0FBMEMsWUFBVztBQUNuRCxZQUFVLElBQVYsQ0FEbUQ7QUFFbkQsUUFBTSxRQUFOLENBQWUsUUFBUSxJQUFSLEVBQWYsRUFGbUQ7QUFHbkQsWUFBVSxLQUFWLENBSG1EO0NBQVg7QUFLMUMsU0FBUyxjQUFULENBQXdCLE1BQXhCLEVBQWdDLE9BQWhDLEdBQTBDLFlBQVc7QUFDbkQsWUFBVSxJQUFWLENBRG1EO0FBRW5ELFFBQU0sUUFBTixDQUFlLFFBQVEsSUFBUixFQUFmLEVBRm1EO0FBR25ELFlBQVUsS0FBVixDQUhtRDtDQUFYIiwiZmlsZSI6InJlZHV4LWRlbW8vcmVkdXgtZGVtby5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBSZWFjdFJlZHV4LCBSZWR1eCAqL1xuXG52YXIgaW5pdGlhbFN0YXRlID0ge1xuICBkcmFnb246IHtcbiAgICBhbGxlbGVzOiBcImE6VCxiOnQsYTptLGI6TSxhOncsYjpXLGE6aCxiOmgsYTpDLGI6QyxhOkIsYjpCLGE6RmwsYjpGbCxhOkhsLGI6aGwsYTphLGI6YSxhOkQsYjpELGE6Qm9nLGI6Qm9nLGE6cmgsYjpyaFwiLFxuICAgIHNleDogMVxuICB9XG59O1xuXG52YXIgcm9vdFJlZHVjZXIgPSBmdW5jdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gIGlmICghc3RhdGUpIHN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gIGNhc2UgJ0FMTEVMRVNfQ0hBTkdFRCc6XG4gICAgcmV0dXJuIHtcbiAgICAgIGRyYWdvbjoge1xuICAgICAgICBhbGxlbGVzOiBhY3Rpb24uYWxsZWxlcyxcbiAgICAgICAgc2V4OiBzdGF0ZS5kcmFnb24uc2V4XG4gICAgICB9XG4gICAgfTtcbiAgY2FzZSAnU0VUX1NUQVRFJzpcbiAgICByZXR1cm4gYWN0aW9uLnN0YXRlO1xuICBkZWZhdWx0OlxuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcblxudmFyIGhpenRvcnkgPSBbXTtcbnZhciBoaXp0b3J5UG9zaXRpb24gPSAwO1xudmFyIHVuZG9pbmcgPSBmYWxzZTtcblxudmFyIEFDVElPTlMgPSB7XG4gIGNoYW5nZWRBbGxlbGU6IGZ1bmN0aW9uKG5ld0FsbGVsZXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJBTExFTEVTX0NIQU5HRURcIixcbiAgICAgIGFsbGVsZXM6IG5ld0FsbGVsZXMsXG4gICAgICBkZXNjcmlwdGlvbjogXCJVc2VyIGNoYW5nZWQgZHJhZ29uIGFsbGVsZVwiXG4gICAgfTtcbiAgfSxcbiAgdW5kbzogZnVuY3Rpb24oKSB7XG4gICAgaGl6dG9yeVBvc2l0aW9uLS07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiU0VUX1NUQVRFXCIsXG4gICAgICBzdGF0ZTogaGl6dG9yeVtoaXp0b3J5UG9zaXRpb25dXG4gICAgfTtcbiAgfSxcbiAgcmVkbzogZnVuY3Rpb24oKSB7XG4gICAgaGl6dG9yeVBvc2l0aW9uKys7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiU0VUX1NUQVRFXCIsXG4gICAgICBzdGF0ZTogaGl6dG9yeVtoaXp0b3J5UG9zaXRpb25dXG4gICAgfTtcbiAgfVxufTtcblxudmFyIGxvZyA9IGZ1bmN0aW9uKGFjdGlvbikge1xuICBjb25zb2xlLmxvZyhcIj09PT0gQUNUSU9OID09PT1cIik7XG4gIGNvbnNvbGUubG9nKFwiICBcIiArIGFjdGlvbi5kZXNjcmlwdGlvbik7XG4gIGRlbGV0ZSBhY3Rpb24uZGVzY3JpcHRpb247XG4gIGNvbnNvbGUubG9nKFwiICBcIiArIEpTT04uc3RyaW5naWZ5KGFjdGlvbikpO1xufTtcblxudmFyIGNyZWF0ZUFjdGlvbiA9IGZ1bmN0aW9uKGFjdGlvbktleSwgcHJvcHMpIHtcbiAgdmFyIGFjdGlvbiA9IEFDVElPTlNbYWN0aW9uS2V5XShwcm9wcyk7XG4gIGxvZyhhY3Rpb24pO1xuICByZXR1cm4gYWN0aW9uO1xufTtcblxudmFyIHN0b3JlID0gUmVkdXguY3JlYXRlU3RvcmUocm9vdFJlZHVjZXIsIGluaXRpYWxTdGF0ZSk7XG5cbnZhciBBUFAgPSBmdW5jdGlvbihwcm9wcykge1xuICB2YXIgZHJhZ29uID0gcHJvcHMuZHJhZ29uLFxuICAgICAgb3JnID0gbmV3IEJpb0xvZ2ljYS5PcmdhbmlzbShCaW9Mb2dpY2EuU3BlY2llcy5EcmFrZSwgZHJhZ29uLmFsbGVsZXMsIGRyYWdvbi5zZXgpO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAnZGl2JyxcbiAgICB7fSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgR2VuaUJsb2Nrcy5PcmdhbmlzbVZpZXcsXG4gICAgICB7b3JnOiBvcmd9XG4gICAgKSxcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgR2VuaUJsb2Nrcy5HZW5vbWVWaWV3LFxuICAgICAge1xuICAgICAgICBvcmc6IG9yZyxcbiAgICAgICAgYWxsZWxlQ2hhbmdlZDogZnVuY3Rpb24oY2hyb20sIHNpZGUsIHByZXZBbGxlbGUsIG5ld0FsbGVsZSkge1xuICAgICAgICAgIG9yZy5nZW5ldGljcy5nZW5vdHlwZS5yZXBsYWNlQWxsZWxlQ2hyb21OYW1lKGNocm9tLCBzaWRlLCBwcmV2QWxsZWxlLCBuZXdBbGxlbGUpO1xuICAgICAgICAgIHByb3BzLmRpc3BhdGNoKGNyZWF0ZUFjdGlvbihcImNoYW5nZWRBbGxlbGVcIiwgb3JnLmdldEFsbGVsZVN0cmluZygpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApXG4gICk7XG59O1xuXG5BUFAucHJvcFR5cGVzID0ge1xuICBkcmFnb246IFJlYWN0LlByb3BUeXBlcy5vYmplY3QsXG4gIGRpc3BhdGNoOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xufTtcblxuZnVuY3Rpb24gc2VsZWN0KHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuUmVhY3RET00ucmVuZGVyKFxuICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIFJlYWN0UmVkdXguUHJvdmlkZXIsXG4gICAge3N0b3JlOiBzdG9yZX0sXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdFJlZHV4LmNvbm5lY3Qoc2VsZWN0KShBUFApLCBudWxsKVxuICApLFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJylcbik7XG5cbmhpenRvcnkucHVzaChzdG9yZS5nZXRTdGF0ZSgpKTtcbnN0b3JlLnN1YnNjcmliZShmdW5jdGlvbigpIHtcbiAgaWYgKCF1bmRvaW5nKSB7XG4gICAgaGl6dG9yeS5wdXNoKHN0b3JlLmdldFN0YXRlKCkpO1xuICAgIGhpenRvcnlQb3NpdGlvbisrO1xuICB9XG59KTtcblxuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ1bmRvXCIpLm9uY2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgdW5kb2luZyA9IHRydWU7XG4gIHN0b3JlLmRpc3BhdGNoKEFDVElPTlMudW5kbygpKTtcbiAgdW5kb2luZyA9IGZhbHNlO1xufTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicmVkb1wiKS5vbmNsaWNrID0gZnVuY3Rpb24oKSB7XG4gIHVuZG9pbmcgPSB0cnVlO1xuICBzdG9yZS5kaXNwYXRjaChBQ1RJT05TLnJlZG8oKSk7XG4gIHVuZG9pbmcgPSBmYWxzZTtcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
